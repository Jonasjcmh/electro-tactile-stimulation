/**************************
Stimluation
2019 October 23
***************************/



import java.util.Arrays;
import processing.serial.*;
import controlP5.*;
import processing.net.*; 

ControlP5 cp5;
RadioButton r1;
Group g2,g3;
Button but1;

// TCP communication
Client myClient;
int[][][] data = new int[3][5][10];

// The serial port:
Serial myPort;       

//user definitions
String COM_PORT="COM3"; //change this!

//software definitions
final int PC_ESP32_STIM_PATTERN=0xFF;
final int PC_ESP32_MEASURE_REQUEST=0xFE;
final int PC_ESP32_POLARITY_CHANGE=0xFD;
final int ESP32_PC_RECEIVE_FINISHED = 0xFE;
final int ESP32_PC_MEASURE_RESULT=0xFF;
final int ESP32_PC_ACKNOWLEDGE=0xFD;

boolean SerialDataSendRequest=false;
boolean StimDataSending=false;
boolean FirstMeasurement = true;

boolean aux=false;



//Drawing variable
 final int ELECTRODE_NUM=63;
 
 
//Data convertion and filtering

final int SENSOR_DIM=30;
final int NEW_DIM=20;
final int number_fingers=3;
final int sen_cols=5;
final int sen_rows=6;
final int red_cols=4;
final int red_rows=5;
final int P_max=255;
final int Rand_max=10;

//final int[] Factors = {100, 50, 25, 17, 13, 10, 0};
//final String[] Value_Factors = {"0.1", "0.2","0.4","0.6","0.8","1", "Orig"};

//final int[] Factors = {100, 66, 41, 33, 28, 25, 22, 20, 17, 12, 0};
//final String[] Value_Factors = {"0.1", "0.15","0.24","0.30","0.35", "0.40","0.45","0.50","0.58","78", "Orig"};

final int[] Factors = {100, 79, 53, 42, 35, 30, 26, 21, 15, 14, 0};
final String[] Value_Factors = {"0.1", "0.12","0.19","0.23","0.28","0.32", "0.38","0.46","0.66","0.73", "Orig"};


//patern drawing

 final float[] Electrode_Pos_X ={
          -0.857, -0.857, -0.857, -0.857,-0.857,      -0.714, -0.714,-0.714,-0.714,-0.714,       -0.571,-0.571,-0.571,-0.571,-0.571,        -0.428, -0.428,-0.428,-0.428,-0.428,     -0.62,    
           -0.143, -0.143, -0.143, -0.143,-0.143,           0,      0,     0,     0,     0,       0.143,  0.143, 0.143, 0.143, 0.143,         0.286,  0.286, 0.286, 0.286, 0.286,      0.07,                
           0.571,  0.571,  0.571,  0.571, 0.571,        0.714, 0.714, 0.714, 0.714, 0.714,       0.857,  0.857, 0.857, 0.857, 0.857,           1.0,    1.0,   1.0,   1.0,   1.0,       0.782,            


                                  };
                                  
final float[] Electrode_Pos_Y ={
            0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,    0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,     0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,    0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,     -0.8 ,
            0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,    0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,     0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,    0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,     -0.8 ,
           0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,    0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,     0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,    0.6 , 0.3 , 0.0 , -0.3 , -0.6 ,       -0.8 ,                     
                               };



int[] sensor_1= new int [SENSOR_DIM];
int[] sensor_2= new int [SENSOR_DIM];
int[] sensor_3= new int [SENSOR_DIM];


int[] [] sensor_mat = new int [sen_rows] [sen_cols];
int[] [] sensor2_mat = new int [sen_rows] [sen_cols];
int[] [] sensor3_mat = new int [sen_rows] [sen_cols];
int[] reducted = new int[NEW_DIM];

int[] patern_filter = new int[NEW_DIM+1];
int[] patern2_filter = new int[NEW_DIM+1];
int[] patern3_filter = new int[NEW_DIM+1];

int[] [] reducted_mat = new int [red_rows] [red_cols];
int[] [] reducted2_mat = new int [red_rows] [red_cols];
int[] [] reducted3_mat = new int [red_rows] [red_cols];

int[] [] filtered_mat = new int [red_rows] [red_cols];
int[] [] filtered2_mat = new int [red_rows] [red_cols];
int[] [] filtered3_mat = new int [red_rows] [red_cols];

float[] [] sensor_resize = new float[red_rows] [red_cols];

int i, j, a,b,c,d,  a2,b2,c2,d2, a3,b3,c3,d3;
float p_relation, rand_relation, pressure, random;
int counter;
boolean experiment2;
boolean experiment2r;



                    
                    
int[] hexa1={0,0,0,254,254,0,0,0,179,254,0,0,0,254,254,0,0,0,254,254};
int[] hexa2={0,0,0,254,254,0,0,0,173,254,0,0,0,254,254,0,0,0,243,254};
int[] hexa3={0,0,0,254,254,0,0,0,150,254,0,0,0,254,254,0,0,0,107,254};
int[] hexa4={0,0,0,254,254,0,0,0,146,254,0,0,0,232,254,0,0,0,97,254};
int[] hexa5={0,0,0,254,254,0,0,0,175,254,0,0,0,254,254,0,0,0,102,254};
int[] hexa6={0,0,0,254,254,0,0,0,178,254,0,0,0,226,254,0,0,0,98,254};
int[] hexa7={0,0,0,254,254,0,0,0,171,254,0,0,0,192,254,0,0,0,97,254};
int[] hexa8={0,0,0,254,254,0,0,0,173,254,0,0,0,178,254,0,0,0,90,254};
int[] hexa9={0,0,0,254,254,0,0,0,159,254,0,0,0,165,254,0,0,0,109,254};
int[] hexa10={0,0,0,254,254,0,0,0,130,254,0,0,0,162,254,0,0,0,114,254};
int[] hexa11={0,0,0,254,254,0,0,0,158,254,0,0,0,81,254,0,0,0,83,254};
int[] hexa12={0,0,0,254,254,0,0,0,155,254,0,0,0,91,254,0,0,0,55,254};
int[] hexa13={0,0,0,254,254,0,0,0,188,254,0,0,0,115,254,0,0,0,0,0};
int[] hexa14={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] hexa15={0,0,0,254,254,0,0,0,200,254,0,0,0,114,254,0,0,0,0,0};
int[] hexa16={0,0,0,254,254,0,0,0,213,254,0,0,0,114,254,0,0,0,0,0};
int[] hexa17={0,0,0,254,254,0,0,0,216,254,0,0,0,114,254,0,0,0,0,0};
int[] hexa18={0,0,0,254,254,0,0,0,214,254,0,0,0,108,254,0,0,0,0,0};
int[] hexa19={0,0,0,254,254,0,0,0,203,254,0,0,0,103,254,0,0,0,0,0};
int[] hexa20={0,0,0,254,254,0,0,0,218,254,0,0,0,103,254,0,0,0,0,0};
int[] hexa21={0,0,0,254,254,0,0,0,239,254,0,0,0,97,254,0,0,0,0,0};
int[] hexa22={0,0,0,254,254,0,0,0,191,254,0,0,0,83,254,0,0,0,0,0};
int[] hexa23={0,0,0,254,254,0,0,0,195,254,0,0,0,82,254,0,0,0,0,0};
int[] hexa24={24,0,0,254,254,12,0,0,164,254,9,0,0,59,254,38,0,0,85,254};
int[] hexa25={34,0,0,254,254,17,0,0,168,254,12,0,0,55,254,48,0,0,75,254};
int[] hexa26={39,0,0,254,254,21,0,0,209,254,11,0,0,55,254,40,0,0,77,254};
int[] hexa27={46,0,0,254,254,24,0,0,230,254,10,0,0,52,254,36,0,0,73,254};
int[] hexa28={50,0,0,254,254,26,0,0,254,254,8,0,0,52,254,28,0,0,63,254};
int[] hexa29={45,0,0,254,233,31,0,0,254,254,7,0,0,67,254,25,0,0,74,254};
int[] hexa30={39,0,186,254,203,12,0,21,254,254,6,0,3,254,254,9,0,3,161,254};
int[] hexa31={8,0,254,254,150,8,0,254,254,254,0,0,60,254,254,3,0,51,254,254};
int[] hexa32={8,10,254,254,135,8,6,254,254,254,0,0,65,254,254,4,1,56,254,254};
int[] hexa33={7,14,254,254,129,8,7,254,254,254,0,0,61,254,254,4,2,53,254,254};
int[] hexa34={7,14,254,254,128,7,5,254,254,254,0,0,58,254,254,1,0,51,254,254};
int[] hexa35={9,16,254,254,117,5,5,254,254,245,0,0,58,254,254,1,0,46,254,254};
int[] hexa36={10,19,254,254,96,6,5,254,254,199,0,0,77,254,254,0,0,50,254,254};
int[] hexa37={9,16,254,254,46,6,5,254,254,115,1,0,149,254,254,0,0,55,254,254};
int[] hexa38={7,20,254,254,27,4,7,254,254,63,3,2,211,254,209,0,0,61,254,254};
int[] hexa39={7,29,254,254,10,4,10,254,254,23,6,6,254,254,83,1,2,76,254,254};
int[] hexa40={0,48,254,254,5,0,15,254,254,14,0,12,254,254,50,0,5,111,254,254};
int[] hexa41={0,254,254,225,5,0,32,254,254,11,0,12,254,254,33,0,9,186,254,254};
int[] hexa42={0,254,254,86,2,0,92,254,254,13,0,20,254,254,33,0,18,254,254,254};
int[] hexa43={30,254,219,73,0,7,254,254,254,0,2,132,254,254,0,0,49,254,254,0};
int[] hexa44={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] hexa45={196,254,204,45,0,23,254,254,140,0,12,254,254,254,0,6,93,254,254,0};
int[] hexa46={254,254,183,38,0,42,254,254,131,0,23,254,254,254,0,11,87,254,254,0};
int[] hexa47={254,254,172,33,0,53,254,254,118,0,29,254,254,254,0,13,85,254,254,0};
int[] hexa48={254,254,187,27,0,67,254,254,110,0,34,254,254,254,0,16,90,254,254,0};
int[] hexa49={254,254,184,25,0,70,254,254,107,0,36,254,254,254,0,17,92,254,254,0};
int[] hexa50={254,254,176,23,0,76,254,254,103,0,38,254,254,254,0,18,97,254,254,0};
int[] hexa51={254,254,166,22,0,81,254,254,96,0,40,254,254,254,0,21,105,254,254,0};
int[] hexa52={254,254,138,19,0,91,254,254,84,0,45,254,254,254,0,25,114,254,254,0};
int[] hexa53={254,254,141,15,0,156,254,254,62,0,47,254,254,254,0,22,115,254,210,0};
int[] hexa54={254,254,139,9,0,205,254,254,40,0,49,254,254,222,0,23,126,254,101,0};
int[] hexa55={254,254,136,6,0,227,254,254,24,0,48,254,254,51,0,25,126,254,79,0};
int[] hexa56={254,254,128,0,0,254,254,254,0,0,68,254,254,0,0,37,143,254,0,0};
int[] hexa57={254,254,105,0,0,254,254,254,0,0,89,254,254,0,0,76,247,254,0,0};
int[] hexa58={254,254,89,0,0,254,254,254,0,0,104,254,254,0,0,110,254,254,0,0};
int[] hexa59={254,254,89,0,0,254,254,184,0,0,113,254,254,0,0,117,254,254,0,0};
int[] hexa60={254,254,84,0,0,254,254,169,0,0,120,254,254,0,0,134,254,254,0,0};
int[] hexa61={254,254,58,0,0,254,254,118,0,0,132,254,254,0,0,130,254,254,0,0};
int[] hexa62={254,254,32,0,0,254,254,65,0,0,254,254,254,0,0,175,254,254,0,0};
int[] hexa63={254,254,25,0,0,254,254,54,0,0,254,254,254,0,0,187,254,254,0,0};
int[] hexa64={254,254,14,0,0,254,254,37,0,0,254,254,190,0,0,229,254,254,0,0};
int[] hexa65={254,254,8,0,0,254,254,33,0,0,254,254,163,0,0,243,254,254,0,0};
int[] hexa66={254,254,7,0,0,254,254,30,0,0,254,254,156,0,0,232,254,254,0,0};
int[] hexa67={254,254,8,0,0,254,254,28,0,0,254,254,150,0,0,228,254,254,0,0};
int[] hexa68={254,254,9,0,0,254,254,28,0,0,254,254,154,0,0,254,254,254,0,0};
int[] hexa69={254,254,8,0,0,254,254,26,0,0,254,254,153,0,0,254,254,254,0,0};
int[] hexa70={254,254,10,0,0,254,254,26,0,0,254,254,155,0,0,254,254,254,0,0};
int[] hexa71={254,254,9,0,0,254,254,23,0,0,254,254,153,0,0,254,254,254,0,0};
int[] hexa72={254,244,9,0,0,254,254,21,0,0,254,254,148,0,0,254,254,254,0,0};
int[] hexa73={254,214,10,0,0,254,254,22,0,0,254,254,145,0,0,254,254,254,0,0};
int[] hexa74={254,208,9,0,0,254,254,21,0,0,254,254,139,0,0,254,254,254,0,0};
int[] hexa75={254,132,7,0,0,254,250,19,0,0,254,254,130,0,0,254,254,254,0,0};
int[] hexa76={254,129,7,0,0,254,243,19,0,0,254,254,126,0,0,254,254,254,0,0};
int[] hexa77={254,114,7,0,0,254,231,18,0,0,254,254,122,0,0,254,254,254,0,0};
int[] hexa78={254,75,8,0,0,254,187,15,0,0,254,254,99,0,0,254,254,254,0,0};
int[] hexa79={254,61,7,0,0,254,188,11,0,0,192,254,84,0,0,254,254,254,0,0};
int[] hexa80={254,66,4,0,0,254,184,8,0,0,190,254,65,0,0,254,254,181,0,0};
int[] hexa81={254,53,4,0,0,254,154,8,0,0,204,254,56,0,0,254,254,145,0,0};
int[] hexa82={254,42,7,0,0,254,126,10,0,0,190,254,64,0,0,254,254,114,0,0};
int[] hexa83={254,41,6,0,0,254,123,11,0,0,191,254,60,0,0,254,254,114,0,0};
int[] hexa84={254,43,0,0,0,254,121,0,0,0,210,254,0,0,0,254,254,0,0,0};
int[] hexa85={254,32,0,0,0,254,118,0,0,0,205,254,0,0,0,254,254,0,0,0};
int[] hexa86={254,33,0,0,0,254,122,0,0,0,197,254,0,0,0,254,254,0,0,0};
int[] hexa87={254,34,0,0,0,254,114,0,0,0,193,254,0,0,0,254,254,0,0,0};
int[] hexa88={254,17,0,0,0,254,104,0,0,0,199,254,0,0,0,254,254,0,0,0};
int[] hexa89={159,25,0,0,0,254,105,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] hexa90={160,22,0,0,0,254,70,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] hexa91={123,17,0,0,0,254,40,0,0,0,254,39,0,0,0,254,254,0,0,0};
int[] hexa92={93,0,0,0,0,150,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa93={69,0,0,0,0,120,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa94={64,0,0,0,0,110,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa95={58,0,0,0,0,103,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa96={41,0,0,0,0,78,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa97={34,0,0,0,0,71,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa98={41,0,0,0,0,71,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa99={21,0,0,0,0,70,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa100={17,0,0,0,0,67,0,0,0,0,253,0,0,0,0,254,0,0,0,0};
int[] hexa101={17,0,0,0,0,62,0,0,0,0,214,0,0,0,0,254,0,0,0,0};
int[] hexa102={9,2,0,0,0,45,12,0,0,0,106,18,0,0,0,254,68,0,0,0};
int[] hexa103={6,6,0,0,0,41,23,0,0,0,98,34,0,0,0,254,111,0,0,0};
int[] hexa104={8,5,0,0,0,40,24,0,0,0,94,34,0,0,0,254,109,0,0,0};
int[] hexa105={7,4,0,0,0,38,21,0,0,0,93,29,0,0,0,254,102,0,0,0};
int[] hexa106={11,0,0,0,0,42,1,0,0,0,93,4,0,0,0,254,20,0,0,0};
int[] hexa107={11,0,0,0,0,41,0,0,0,0,86,0,0,0,0,254,0,0,0,0};
int[] hexa108={11,0,0,0,0,41,0,0,0,0,83,0,0,0,0,254,0,0,0,0};
int[] hexa109={8,0,0,0,0,34,0,0,0,0,65,0,0,0,0,254,0,0,0,0};
int[] hexa110={8,0,0,0,0,30,0,0,0,0,56,0,0,0,0,175,0,0,0,0};
int[] hexa111={3,0,0,0,0,17,0,0,0,0,31,0,0,0,0,100,0,0,0,0};
int[] hexa112={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] hexa113={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] hexa114={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] hexa115={7,0,0,0,0,19,0,0,0,0,63,0,0,0,0,172,0,0,0,0};
int[] hexa116={18,0,0,0,0,46,0,0,0,0,193,0,0,0,0,254,0,0,0,0};
int[] hexa117={21,0,0,0,0,75,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa118={22,0,0,0,0,83,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa119={32,0,0,0,0,90,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa120={44,0,0,0,0,102,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa121={68,0,0,0,0,142,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa122={148,0,0,0,0,254,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] hexa123={136,1,0,0,0,254,7,0,0,0,254,18,0,0,0,254,70,0,0,0};
int[] hexa124={254,51,0,0,0,254,133,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] hexa125={254,70,0,0,0,254,175,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] hexa126={254,71,0,0,0,254,174,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] hexa127={254,102,0,0,0,254,187,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] hexa128={254,103,0,0,0,254,186,0,0,0,254,254,3,0,0,254,254,34,0,0};
int[] hexa129={254,105,0,0,0,254,179,0,0,0,254,254,5,0,0,254,254,47,0,0};
int[] hexa130={254,135,0,0,0,254,239,0,0,0,254,254,8,0,0,254,254,78,0,0};
int[] hexa131={254,150,1,0,0,254,254,0,0,0,254,254,23,0,0,254,254,199,0,0};
int[] hexa132={254,173,4,0,0,254,254,2,0,0,254,254,46,0,0,254,254,254,0,0};
int[] hexa133={254,183,5,0,0,254,254,3,0,0,254,254,49,0,0,254,254,254,0,0};
int[] hexa134={254,199,4,0,0,254,254,4,0,0,254,254,52,0,0,254,254,254,0,0};
int[] hexa135={254,254,3,0,0,254,254,9,0,0,254,254,68,0,0,254,254,254,0,0};
int[] hexa136={254,254,10,0,0,254,254,38,0,0,99,254,126,0,0,156,254,254,0,0};
int[] hexa137={254,254,18,0,0,254,254,62,0,0,74,254,183,0,0,112,254,254,0,0};
int[] hexa138={254,254,27,0,0,249,254,72,0,0,61,254,212,0,0,90,254,254,0,0};
int[] hexa139={254,254,28,0,0,232,254,80,0,0,64,254,247,0,0,81,254,254,0,0};
int[] hexa140={254,254,44,0,0,226,254,115,0,0,56,254,254,0,0,71,254,254,0,0};
int[] hexa141={254,254,93,0,0,191,254,226,0,0,51,254,254,0,0,57,254,254,0,0};
int[] hexa142={254,254,142,0,0,136,254,254,0,0,45,254,254,0,0,48,211,254,0,0};
int[] hexa143={254,254,158,0,0,109,254,254,0,0,39,254,254,0,0,42,206,254,0,0};
int[] hexa144={254,254,174,0,0,68,254,254,0,0,38,254,254,0,0,39,178,254,0,0};
int[] hexa145={254,254,193,0,0,60,254,254,0,0,38,254,254,0,0,33,156,254,0,0};
int[] hexa146={254,254,211,0,0,53,254,254,0,0,36,254,254,0,0,20,112,254,0,0};
int[] hexa147={254,254,234,0,0,46,254,254,0,0,39,254,254,0,0,19,93,254,0,0};
int[] hexa148={254,254,254,0,0,32,254,254,0,0,26,224,254,0,0,17,87,254,0,0};
int[] hexa149={252,254,254,0,0,29,254,254,0,0,22,208,254,0,0,17,85,254,0,0};
int[] hexa150={217,254,254,5,0,27,254,254,24,0,21,197,254,76,0,15,69,254,185,0};
int[] hexa151={207,254,254,14,0,25,254,254,56,0,18,171,254,172,0,12,60,254,254,0};
int[] hexa152={89,254,254,11,0,26,254,254,61,0,11,120,254,198,0,14,59,254,254,0};
int[] hexa153={93,254,254,13,0,26,254,254,79,0,6,89,254,247,0,12,55,254,254,0};
int[] hexa154={89,254,254,15,0,29,254,254,113,0,6,79,254,254,0,11,48,254,254,0};
int[] hexa155={84,254,254,15,0,29,254,254,106,0,6,69,254,254,0,11,42,254,254,0};
int[] hexa156={80,254,254,25,0,32,254,254,119,0,6,60,254,254,0,11,40,254,254,0};
int[] hexa157={69,254,254,39,0,35,254,254,135,0,5,45,254,254,0,11,35,254,254,0};
int[] hexa158={62,254,254,51,0,40,254,254,159,0,5,34,254,254,0,11,32,254,254,0};
int[] hexa159={60,254,254,56,0,41,219,254,177,0,5,29,254,254,0,12,29,254,254,0};
int[] hexa160={51,254,254,64,0,29,201,254,193,0,4,30,254,254,0,11,34,254,254,0};
int[] hexa161={40,254,254,71,0,6,106,254,200,0,2,33,254,254,0,10,41,254,254,0};
int[] hexa162={9,254,254,93,0,0,90,254,254,0,0,31,254,254,0,1,48,254,254,0};
int[] hexa163={0,254,254,140,0,0,66,254,254,0,0,28,254,254,0,0,63,254,254,0};
int[] hexa164={0,254,254,194,0,0,27,254,254,0,0,17,254,254,0,0,39,254,254,0};
int[] hexa165={0,239,254,254,0,0,24,254,254,0,0,21,254,254,0,0,15,202,254,0};
int[] hexa166={0,150,254,254,16,0,25,254,254,45,0,30,254,254,161,0,10,91,254,254};
int[] hexa167={0,69,254,254,23,0,20,254,254,56,0,5,128,254,212,0,5,64,254,254};
int[] hexa168={0,0,254,254,57,0,0,254,254,133,0,0,78,254,254,0,0,65,254,254};
int[] hexa169={0,0,254,254,78,0,0,254,254,222,0,0,56,254,254,0,0,57,254,254};
int[] hexa170={0,0,254,254,114,0,0,232,254,254,0,0,38,254,254,0,0,49,254,254};
int[] hexa171={0,0,254,254,145,0,0,80,254,254,0,0,41,254,254,0,0,64,254,254};
int[] hexa172={0,0,254,254,161,0,0,70,254,254,0,0,37,254,254,0,0,64,254,254};
int[] hexa173={0,0,254,254,254,0,0,52,254,254,0,0,48,254,254,0,0,0,0,0};
int[] hexa174={0,0,254,254,254,0,0,64,254,254,0,0,37,254,254,0,0,0,0,0};
int[] hexa175={0,0,197,254,254,0,0,51,254,254,0,0,33,254,254,0,0,0,0,0};
int[] hexa176={0,0,106,254,254,0,0,42,254,254,0,0,39,254,254,0,0,0,0,0};
int[] hexa177={0,0,57,254,254,0,0,52,254,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa178={0,0,27,254,254,0,0,23,254,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa179={0,0,28,254,254,0,0,32,254,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa180={0,0,29,254,254,0,0,21,186,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa181={0,0,43,254,254,0,0,34,130,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa182={0,0,70,254,254,0,0,46,69,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa183={0,0,86,208,254,0,0,54,48,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa184={0,0,83,103,254,0,0,59,29,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa185={0,0,87,0,254,0,0,56,0,254,0,0,0,0,0,0,0,0,0,0};
int[] hexa186={0,0,65,0,254,0,0,11,0,222,0,0,0,0,0,0,0,0,0,0};
int[] hexa187={0,0,74,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

int[] cilin1={0,0,16,254,254,0,0,11,254,254,0,0,6,129,254,0,0,0,0,0};
int[] cilin2={0,0,19,254,254,0,0,11,254,254,0,0,6,125,254,0,0,0,0,0};
int[] cilin3={0,0,18,254,254,0,0,11,254,254,0,0,6,128,254,0,0,0,0,0};
int[] cilin4={0,0,19,254,254,0,0,10,254,254,0,0,5,131,254,0,0,0,0,0};
int[] cilin5={0,0,20,254,254,0,0,11,254,254,0,0,7,132,254,0,0,0,0,0};
int[] cilin6={0,0,27,254,254,0,0,16,254,254,0,0,9,123,254,0,0,0,0,0};
int[] cilin7={0,0,31,254,254,0,0,18,254,254,0,0,9,122,254,0,0,0,0,0};
int[] cilin8={0,0,38,254,254,0,0,25,254,254,0,0,9,122,254,0,0,0,3,152};
int[] cilin9={0,0,44,254,254,0,0,28,254,254,0,0,10,128,254,0,0,5,48,254};
int[] cilin10={0,0,46,254,254,0,0,25,254,254,0,0,10,138,254,0,0,10,55,254};
int[] cilin11={0,0,55,254,254,0,0,28,254,254,0,0,13,145,254,0,0,14,83,254};
int[] cilin12={0,0,105,254,254,0,0,27,254,254,0,0,12,149,254,0,0,12,83,254};
int[] cilin13={0,0,254,254,254,0,0,47,254,254,0,0,18,140,254,0,0,20,79,254};
int[] cilin14={0,0,254,254,254,0,0,73,254,254,0,0,46,254,254,0,0,28,106,254};
int[] cilin15={0,10,254,254,254,0,0,84,254,254,0,4,51,254,254,0,0,24,122,254};
int[] cilin16={0,13,254,254,254,0,1,99,254,254,0,5,58,254,254,0,1,26,130,254};
int[] cilin17={0,14,254,254,254,0,1,105,254,254,0,4,57,254,254,0,0,24,144,254};
int[] cilin18={0,17,254,254,254,0,1,112,254,254,0,4,56,254,254,0,0,22,148,254};
int[] cilin19={0,25,254,254,163,0,12,188,254,254,0,6,59,254,254,0,5,28,224,254};
int[] cilin20={0,33,254,254,64,0,19,254,254,254,0,6,82,254,254,0,5,35,254,254};
int[] cilin21={0,52,254,254,42,0,21,254,254,180,0,6,99,254,254,0,9,46,254,254};
int[] cilin22={0,75,254,254,14,0,29,254,254,72,0,9,128,254,254,0,13,66,254,254};
int[] cilin23={0,139,254,254,17,0,28,254,254,66,0,9,141,254,254,0,14,75,254,254};
int[] cilin24={0,152,254,254,16,0,29,254,254,60,0,9,143,254,254,0,15,84,254,254};
int[] cilin25={0,185,254,254,12,0,30,254,254,54,0,9,131,254,254,0,14,77,254,254};
int[] cilin26={0,206,254,254,12,0,34,254,254,40,0,13,133,254,254,0,16,80,254,254};
int[] cilin27={0,218,254,254,9,0,36,254,254,31,0,12,138,254,226,0,16,83,254,253};
int[] cilin28={0,203,254,254,9,0,33,254,254,34,0,10,137,254,217,0,16,83,254,252};
int[] cilin29={0,202,254,254,8,0,31,254,254,33,0,11,141,254,239,0,15,85,254,246};
int[] cilin30={0,196,254,254,12,0,30,254,254,47,0,10,136,254,254,0,16,84,254,254};
int[] cilin31={0,205,254,254,8,0,31,254,254,38,0,10,138,254,254,0,18,95,254,161};
int[] cilin32={0,215,254,254,0,0,32,254,254,0,0,11,148,254,0,0,20,107,254,0};
int[] cilin33={0,225,254,254,0,0,33,254,254,0,0,12,150,254,0,0,20,107,254,0};
int[] cilin34={0,228,254,254,0,0,32,254,254,0,0,12,148,254,0,0,19,107,254,0};
int[] cilin35={0,229,254,254,0,0,33,254,254,0,0,11,146,254,0,0,19,106,254,0};
int[] cilin36={0,238,254,254,0,0,33,254,254,0,0,12,142,254,0,0,18,106,254,0};
int[] cilin37={0,247,254,254,0,0,32,254,254,0,0,12,139,254,0,0,18,104,254,0};
int[] cilin38={0,254,254,254,0,0,32,254,254,0,0,18,254,254,0,0,21,213,254,0};
int[] cilin39={0,254,254,254,0,0,44,254,254,0,0,25,254,254,0,0,28,240,254,0};
int[] cilin40={0,254,254,254,0,0,61,254,254,0,0,27,254,254,0,0,34,254,254,0};
int[] cilin41={0,254,254,254,0,0,74,254,254,0,0,30,254,254,0,0,37,254,254,0};
int[] cilin42={28,254,254,254,0,13,156,254,254,0,4,37,254,254,0,7,36,254,254,0};
int[] cilin43={52,254,254,254,0,21,254,254,254,0,6,69,254,254,0,11,52,254,254,0};
int[] cilin44={133,254,254,227,0,23,254,254,254,0,6,80,254,254,0,14,72,254,254,0};
int[] cilin45={210,254,254,52,0,29,254,254,254,0,4,58,254,254,0,14,73,254,254,0};
int[] cilin46={254,254,254,52,0,37,254,254,254,0,4,53,197,254,0,15,66,254,254,0};
int[] cilin47={254,254,254,44,0,55,254,254,254,0,6,54,194,254,0,20,66,254,254,0};
int[] cilin48={254,254,210,39,0,82,254,254,254,0,49,233,254,254,0,24,62,254,254,0};
int[] cilin49={254,254,225,25,0,89,254,254,240,0,79,254,254,254,0,23,62,254,254,0};
int[] cilin50={254,254,215,8,0,210,254,254,81,0,87,254,254,254,0,27,73,254,113,0};
int[] cilin51={254,254,180,6,0,254,254,254,32,0,132,254,254,254,0,36,60,254,107,0};
int[] cilin52={254,254,128,8,0,254,254,252,26,0,165,254,254,254,0,43,66,254,97,0};
int[] cilin53={254,254,125,7,0,254,254,254,18,0,165,254,254,211,0,43,57,254,88,0};
int[] cilin54={254,254,108,4,0,254,254,224,9,0,216,254,254,122,0,49,55,254,58,0};
int[] cilin55={254,254,77,0,0,254,254,180,0,0,165,254,254,0,0,74,132,254,0,0};
int[] cilin56={254,254,66,0,0,254,254,171,0,0,153,254,254,0,0,95,179,254,0,0};
int[] cilin57={254,254,66,0,0,254,254,169,0,0,147,254,254,0,0,100,210,254,0,0};
int[] cilin58={254,254,64,0,0,254,254,164,0,0,131,254,254,0,0,82,254,254,0,0};
int[] cilin59={254,254,56,0,0,254,254,156,0,0,203,254,254,0,0,72,254,254,0,0};
int[] cilin60={254,254,49,0,0,254,254,125,0,0,254,254,254,0,0,76,254,254,0,0};
int[] cilin61={254,254,28,0,0,254,254,81,0,0,254,254,254,0,0,98,254,254,0,0};
int[] cilin62={254,254,20,0,0,254,254,59,0,0,254,254,254,0,0,100,254,254,0,0};
int[] cilin63={254,254,21,0,0,254,254,53,0,0,254,254,237,0,0,106,254,254,0,0};
int[] cilin64={254,247,14,0,0,254,254,42,0,0,254,254,209,0,0,101,254,254,0,0};
int[] cilin65={254,163,15,0,0,254,254,31,0,0,254,254,154,0,0,236,254,254,0,0};
int[] cilin66={254,142,14,0,0,254,254,30,0,0,254,254,139,0,0,254,254,254,0,0};
int[] cilin67={254,117,13,0,0,254,254,27,0,0,254,254,133,0,0,254,254,254,0,0};
int[] cilin68={254,84,16,0,0,254,254,29,0,0,254,254,118,0,0,254,254,254,0,0};
int[] cilin69={254,49,11,0,0,254,206,23,0,0,254,254,130,0,0,254,254,254,0,0};
int[] cilin70={254,29,6,0,0,254,182,21,0,0,254,254,116,0,0,254,254,217,0,0};
int[] cilin71={202,53,0,0,0,254,189,0,0,0,254,254,9,0,0,254,254,24,0,0};
int[] cilin72={184,57,0,0,0,254,182,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin73={185,56,0,0,0,254,167,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin74={160,51,0,0,0,254,133,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin75={137,34,0,0,0,254,82,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin76={94,24,0,0,0,254,84,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin77={81,26,0,0,0,254,85,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin78={75,27,0,0,0,254,69,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin79={42,30,0,0,0,158,77,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin80={27,24,0,0,0,92,57,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin81={23,1,0,0,0,55,5,0,0,0,254,53,0,0,0,254,37,0,0,0};
int[] cilin82={22,0,0,0,0,56,0,0,0,0,209,0,0,0,0,254,0,0,0,0};
int[] cilin83={21,0,0,0,0,55,0,0,0,0,203,0,0,0,0,254,0,0,0,0};
int[] cilin84={21,0,0,0,0,49,0,0,0,0,195,0,0,0,0,254,0,0,0,0};
int[] cilin85={19,0,0,0,0,40,0,0,0,0,165,0,0,0,0,254,0,0,0,0};
int[] cilin86={9,0,0,0,0,17,0,0,0,0,89,0,0,0,0,254,0,0,0,0};
int[] cilin87={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] cilin88={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] cilin89={25,0,0,0,0,53,0,0,0,0,176,0,0,0,0,254,0,0,0,0};
int[] cilin90={27,0,0,0,0,62,0,0,0,0,233,0,0,0,0,254,0,0,0,0};
int[] cilin91={25,0,0,0,0,71,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin92={41,0,0,0,0,128,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin93={58,0,0,0,0,169,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin94={145,0,0,0,0,254,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin95={176,0,0,0,0,254,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin96={209,0,0,0,0,254,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin97={228,0,0,0,0,254,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin98={254,0,0,0,0,254,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin99={254,0,0,0,0,254,0,0,0,0,254,0,0,0,0,254,0,0,0,0};
int[] cilin100={254,24,0,0,0,254,66,0,0,0,254,184,0,0,0,254,254,0,0,0};
int[] cilin101={254,50,0,0,0,254,139,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin102={254,63,0,0,0,254,160,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin103={254,71,0,0,0,254,174,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin104={254,73,0,0,0,254,180,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin105={254,118,0,0,0,254,254,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin106={254,157,0,0,0,254,254,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin107={254,177,0,0,0,254,254,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin108={254,192,0,0,0,254,254,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin109={254,254,0,0,0,254,254,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] cilin110={254,254,0,0,0,254,254,5,0,0,254,254,24,0,0,254,254,67,0,0};
int[] cilin111={254,254,8,0,0,254,254,33,0,0,254,254,122,0,0,254,254,254,0,0};
int[] cilin112={254,254,13,0,0,254,254,43,0,0,254,254,176,0,0,254,254,254,0,0};
int[] cilin113={254,254,19,0,0,254,254,55,0,0,186,254,232,0,0,254,254,254,0,0};
int[] cilin114={254,254,45,0,0,254,254,103,0,0,194,254,254,0,0,254,254,254,0,0};
int[] cilin115={254,254,113,0,0,78,254,236,0,0,106,254,254,0,0,213,247,254,0,0};
int[] cilin116={138,254,206,0,0,40,254,254,0,0,4,54,254,0,0,14,74,254,0,0};
int[] cilin117={85,254,254,0,0,35,254,254,0,0,6,83,254,0,0,14,75,254,0,0};
int[] cilin118={80,254,254,0,0,31,254,254,0,0,7,92,254,0,0,13,76,254,0,0};
int[] cilin119={81,254,254,4,0,31,254,254,15,0,7,102,254,61,0,10,64,254,151,0};
int[] cilin120={73,254,254,7,0,27,254,254,22,0,6,105,254,82,0,10,60,254,206,0};
int[] cilin121={58,254,254,6,0,21,254,254,30,0,4,98,254,96,0,8,56,254,248,0};
int[] cilin122={42,254,254,9,0,12,254,254,35,0,4,88,254,113,0,5,57,254,254,0};
int[] cilin123={32,254,254,13,0,9,254,254,46,0,2,87,254,148,0,4,85,254,254,0};
int[] cilin124={0,254,254,36,0,0,250,254,97,0,0,52,254,254,0,0,49,254,254,0};
int[] cilin125={0,254,254,53,0,0,75,254,120,0,0,33,254,254,0,0,40,254,254,0};
int[] cilin126={0,254,254,73,0,0,51,254,140,0,0,23,254,254,0,0,30,254,254,0};
int[] cilin127={0,254,254,86,0,0,39,254,150,0,0,17,254,254,0,0,26,254,254,0};
int[] cilin128={0,254,254,95,0,0,37,254,171,0,0,18,254,254,0,0,23,254,254,0};
int[] cilin129={0,226,254,97,0,0,31,254,219,0,0,23,254,254,0,0,23,254,254,0};
int[] cilin130={0,195,254,94,0,0,35,254,230,0,0,25,254,254,0,0,24,254,254,0};
int[] cilin131={0,111,254,133,0,0,28,254,254,0,0,22,254,254,0,0,23,254,254,0};
int[] cilin132={0,96,254,160,0,0,23,254,254,0,0,19,254,254,0,0,21,254,254,0};
int[] cilin133={0,96,254,175,0,0,24,254,254,0,0,17,254,254,0,0,21,254,254,0};
int[] cilin134={0,85,254,179,14,0,21,254,254,16,0,17,252,254,38,0,18,254,254,21};
int[] cilin135={0,71,254,194,18,0,17,254,254,51,0,13,213,254,58,0,13,146,254,34};
int[] cilin136={0,55,254,205,24,0,15,254,254,157,0,9,177,254,49,0,9,94,254,28};
int[] cilin137={0,29,254,210,32,0,8,254,254,181,0,2,160,254,57,0,4,99,254,32};
int[] cilin138={0,0,254,254,11,0,0,254,254,119,0,0,143,254,29,0,0,105,254,17};
int[] cilin139={0,0,254,254,5,0,0,254,254,42,0,0,132,254,126,0,0,91,254,237};
int[] cilin140={0,0,254,254,13,0,0,254,254,85,0,0,121,254,254,0,0,81,254,254};
int[] cilin141={0,0,254,254,31,0,0,254,254,165,0,0,91,254,254,0,0,74,254,254};
int[] cilin142={0,0,254,254,53,0,0,254,254,157,0,0,79,254,254,0,0,58,254,254};
int[] cilin143={0,0,254,254,67,0,0,254,254,185,0,0,65,254,254,0,0,51,254,254};
int[] cilin144={0,0,254,254,68,0,0,254,254,195,0,0,64,254,254,0,0,41,254,254};

int[] square1={1,0,69,254,254,5,0,30,254,254,0,0,12,88,254,9,0,19,89,254};
int[] square2={13,0,69,254,254,15,0,31,254,254,3,0,11,84,254,19,0,18,83,254};
int[] square3={20,0,69,254,254,18,0,29,254,254,3,0,8,78,254,19,0,14,72,254};
int[] square4={21,0,82,254,254,16,0,33,254,254,2,0,5,69,254,14,0,13,65,254};
int[] square5={24,0,96,254,216,14,0,39,254,254,0,0,4,69,254,8,0,11,62,254};
int[] square6={24,0,95,254,212,13,0,38,254,254,0,0,5,66,254,6,0,10,61,254};
int[] square7={31,0,137,254,202,12,0,34,254,254,0,0,2,40,254,6,0,11,60,254};
int[] square8={114,0,254,254,85,20,0,66,254,254,0,0,9,56,254,7,0,16,61,254};
int[] square9={64,254,254,139,26,29,254,254,254,111,5,39,254,254,254,11,30,254,254,254};
int[] square10={72,254,254,139,19,25,254,254,254,60,5,55,254,254,254,9,37,254,254,254};
int[] square11={66,254,254,133,8,24,254,254,254,20,2,58,254,254,117,10,53,254,254,254};
int[] square12={61,254,254,130,4,23,254,254,254,12,2,55,195,254,77,11,62,254,254,254};
int[] square13={124,254,254,119,0,21,254,254,254,0,1,64,218,254,0,12,81,254,254,0};
int[] square14={157,254,254,94,0,19,254,254,254,0,1,55,174,254,0,9,87,254,254,0};
int[] square15={254,254,254,80,0,38,254,254,195,0,30,254,254,254,0,18,80,254,254,0};
int[] square16={254,254,254,34,0,58,254,254,109,0,55,254,254,254,0,22,75,254,153,0};
int[] square17={254,254,254,24,0,73,254,254,74,0,81,254,254,113,0,25,67,254,135,0};
int[] square18={254,254,254,10,0,79,254,254,35,0,92,254,254,64,0,29,77,254,74,0};
int[] square19={254,254,254,0,0,75,254,254,0,0,99,254,254,0,0,29,85,254,0,0};
int[] square20={254,254,254,0,0,77,254,254,0,0,103,254,254,0,0,32,84,254,0,0};
int[] square21={254,254,254,0,0,77,254,254,0,0,105,254,254,0,0,32,83,254,0,0};
int[] square22={254,254,254,0,0,117,254,254,0,0,100,254,254,0,0,30,82,254,0,0};
int[] square23={254,254,254,0,0,146,254,254,0,0,101,254,254,0,0,28,80,254,0,0};
int[] square24={254,254,237,0,0,149,254,254,0,0,100,254,254,0,0,26,79,254,0,0};
int[] square25={254,254,174,0,0,187,254,254,0,0,95,254,254,0,0,26,80,254,0,0};
int[] square26={254,254,137,0,0,206,254,254,0,0,96,254,254,0,0,27,81,254,0,0};
int[] square27={254,254,110,0,0,232,254,254,0,0,103,254,254,0,0,29,85,254,0,0};
int[] square28={254,254,78,0,0,254,254,254,0,0,115,254,254,0,0,34,88,254,0,0};
int[] square29={254,254,34,0,0,254,254,101,0,0,133,254,254,0,0,40,100,254,0,0};
int[] square30={254,254,31,0,0,254,254,100,0,0,123,254,254,0,0,40,107,254,0,0};
int[] square31={254,254,25,0,0,254,254,88,0,0,124,254,254,0,0,38,120,254,0,0};
int[] square32={254,254,25,0,0,254,254,76,0,0,131,254,254,0,0,41,129,254,0,0};
int[] square33={254,96,14,0,0,254,254,21,0,0,254,254,149,0,0,254,254,254,0,0};
int[] square34={254,43,9,0,0,254,174,19,0,0,254,254,105,0,0,254,254,254,0,0};
int[] square35={135,24,2,0,0,254,141,15,0,0,254,254,40,0,0,254,254,254,0,0};
int[] square36={183,45,14,0,0,254,43,13,0,0,254,62,7,0,0,254,254,27,0,0};
int[] square37={150,46,20,0,0,254,47,24,0,0,254,55,11,0,0,254,254,35,0,0};
int[] square38={145,49,21,0,0,254,50,24,0,0,254,55,12,0,0,254,254,35,0,0};
int[] square39={143,52,25,0,0,254,52,27,0,0,254,54,14,0,0,254,254,33,0,0};
int[] square40={156,40,27,0,0,254,34,33,0,0,254,10,18,0,0,254,15,34,0,0};
int[] square41={159,51,34,0,0,254,37,36,0,0,254,11,18,0,0,254,17,36,0,0};
int[] square42={133,73,47,0,0,154,38,32,0,0,254,12,14,0,0,254,22,42,0,0};
int[] square43={152,66,48,0,0,135,39,30,0,0,254,17,21,0,0,254,23,43,0,0};
int[] square44={124,55,41,0,0,134,40,33,0,0,254,20,25,0,0,254,19,33,0,0};
int[] square45={59,30,20,0,0,114,44,41,0,0,193,28,37,0,0,254,24,40,0,0};
int[] square46={54,31,21,0,0,112,49,40,0,0,192,31,33,0,0,254,26,40,0,0};
int[] square47={52,31,20,0,0,115,54,41,0,0,189,28,33,0,0,254,28,42,0,0};
int[] square48={48,31,15,0,0,120,58,38,0,0,181,28,32,0,0,254,34,46,0,0};
int[] square49={12,33,16,0,0,28,26,15,0,0,122,24,23,0,0,254,32,37,0,0};
int[] square50={23,55,0,0,0,29,39,0,0,0,116,39,0,0,0,254,46,0,0,0};
int[] square51={15,57,0,0,0,19,37,0,0,0,84,39,0,0,0,254,55,0,0,0};
int[] square52={45,38,0,0,0,34,30,0,0,0,82,37,0,0,0,254,59,0,0,0};
int[] square53={49,38,0,0,0,30,24,0,0,0,81,35,0,0,0,254,57,0,0,0};
int[] square54={40,40,0,0,0,22,27,0,0,0,29,36,0,0,0,99,69,0,0,0};
int[] square55={49,37,0,0,0,22,25,0,0,0,13,33,0,0,0,21,69,0,0,0};
int[] square56={61,34,0,0,0,30,21,0,0,0,16,31,0,0,0,26,63,0,0,0};
int[] square57={65,31,2,0,0,31,23,0,0,0,15,29,0,0,0,27,61,0,0,0};
int[] square58={66,34,0,0,0,36,24,0,0,0,15,30,0,0,0,30,66,0,0,0};
int[] square59={62,32,0,0,0,34,24,0,0,0,16,29,0,0,0,27,67,0,0,0};
int[] square60={63,31,0,0,0,32,22,0,0,0,15,27,0,0,0,25,64,0,0,0};
int[] square61={58,27,0,0,0,30,19,0,0,0,12,26,0,0,0,29,61,0,0,0};
int[] square62={49,25,0,0,0,27,20,0,0,0,12,25,0,0,0,22,58,0,0,0};
int[] square63={50,25,0,0,0,29,20,0,0,0,13,25,0,0,0,27,57,0,0,0};
int[] square64={59,23,0,0,0,36,20,0,0,0,15,24,0,0,0,29,62,0,0,0};
int[] square65={52,21,0,0,0,32,17,0,0,0,12,21,0,0,0,29,51,0,0,0};
int[] square66={50,12,0,0,0,33,10,0,0,0,14,13,0,0,0,30,35,0,0,0};
int[] square67={52,11,0,0,0,35,12,0,0,0,16,12,0,0,0,34,36,0,0,0};
int[] square68={52,5,0,0,0,38,5,0,0,0,18,7,0,0,0,39,17,0,0,0};
int[] square69={56,3,0,0,0,38,5,0,0,0,19,5,0,0,0,36,20,0,0,0};
int[] square70={51,4,0,0,0,34,2,0,0,0,19,6,0,0,0,31,17,0,0,0};
int[] square71={0,0,4,0,0,0,0,26,0,0,0,0,26,0,0,0,0,76,0,0};
int[] square72={0,0,173,10,0,0,0,27,9,0,0,0,24,14,0,0,0,68,112,0};
int[] square73={0,0,254,37,0,0,0,44,15,0,0,0,34,35,0,0,0,80,228,0};
int[] square74={235,44,0,5,0,254,126,0,10,0,254,254,0,5,0,254,254,0,50,0};
int[] square75={0,0,0,0,0,254,146,0,14,0,254,254,0,16,0,254,254,0,132,0};
int[] square76={0,0,0,0,0,254,153,0,11,0,254,254,0,20,0,254,254,0,252,0};
int[] square77={109,96,0,254,0,254,142,0,35,0,254,254,0,38,0,254,254,0,254,0};
int[] square78={78,71,0,254,0,254,140,0,44,0,254,254,0,42,0,254,254,0,254,0};
int[] square79={73,71,40,254,0,254,141,10,41,0,254,254,1,41,0,254,254,4,254,0};
int[] square80={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] square81={92,78,109,254,0,254,150,22,37,0,254,254,22,44,0,254,254,102,254,0};
int[] square82={94,75,106,254,0,254,159,23,40,0,254,254,31,50,0,254,254,154,254,0};
int[] square83={88,71,143,254,0,254,162,33,40,0,254,254,39,47,0,254,254,183,254,0};
int[] square84={87,72,131,254,0,254,161,32,39,0,254,254,41,48,0,254,254,193,254,0};
int[] square85={84,68,124,254,0,254,166,34,39,0,254,254,45,48,0,254,254,204,254,0};
int[] square86={89,68,116,254,0,254,181,34,42,0,254,254,50,54,0,254,254,214,254,0};
int[] square87={103,73,116,254,0,254,175,30,45,0,254,254,51,59,0,254,254,219,254,0};
int[] square88={126,82,31,254,0,254,185,12,55,0,254,254,47,64,0,254,254,224,254,0};
int[] square89={121,77,31,254,48,254,183,12,52,0,254,254,52,64,0,254,254,233,254,7};
int[] square90={118,73,30,254,62,254,184,9,55,2,254,254,53,71,1,254,254,232,254,9};
int[] square91={133,83,37,254,53,254,190,12,52,0,254,254,61,71,1,254,254,251,254,6};
int[] square92={132,78,37,254,74,254,199,13,51,2,254,254,65,73,4,254,254,254,254,9};
int[] square93={161,70,31,254,87,254,208,26,101,112,254,254,68,70,8,254,254,254,254,13};
int[] square94={198,88,42,254,118,254,219,28,112,117,254,254,74,75,8,254,254,254,254,11};
int[] square95={254,110,47,254,66,254,246,36,129,64,254,254,86,80,2,254,254,254,254,6};
int[] square96={254,212,102,110,0,254,254,47,33,0,254,254,126,74,0,71,254,254,254,0};
int[] square97={76,254,222,44,0,254,254,254,93,0,86,254,254,254,0,18,254,254,254,0};
int[] square98={105,254,208,41,0,254,254,254,109,0,45,254,254,254,0,21,254,254,254,0};
int[] square99={92,254,206,41,0,254,254,254,111,0,43,254,254,254,0,20,254,254,254,0};
int[] square100={102,254,223,61,0,254,254,254,107,0,45,254,254,254,0,21,254,254,254,0};
int[] square101={109,254,252,93,0,254,254,254,104,0,46,254,254,254,0,21,254,254,254,0};
int[] square102={92,254,246,82,0,254,254,254,108,0,42,254,254,254,0,20,254,254,254,0};
int[] square103={66,254,209,44,0,254,254,254,120,0,37,254,254,254,0,19,254,254,254,0};
int[] square104={62,254,211,44,0,254,254,254,128,0,35,254,254,254,0,19,254,254,254,0};
int[] square105={60,254,212,43,0,254,254,254,134,0,32,254,254,254,0,18,254,254,254,0};
int[] square106={62,254,216,44,0,254,254,254,134,0,31,254,254,254,0,18,254,254,254,0};
int[] square107={63,254,215,43,0,254,254,254,135,0,30,254,254,254,0,19,254,254,254,0};
int[] square108={59,254,217,44,0,254,254,254,138,0,29,254,254,254,0,18,254,254,254,0};
int[] square109={58,254,220,44,0,254,254,254,144,0,28,254,254,254,0,19,254,254,254,0};
int[] square110={58,254,224,46,0,254,254,254,145,0,27,254,254,254,0,21,254,254,254,0};
int[] square111={53,254,225,45,0,254,254,254,148,0,25,254,254,254,0,21,199,254,254,0};
int[] square112={14,254,229,47,0,82,254,254,161,0,6,254,254,254,0,5,126,254,254,0};
int[] square113={0,254,254,44,0,0,254,254,165,0,0,254,254,254,0,0,96,254,254,0};
int[] square114={0,254,254,44,0,0,254,254,173,0,0,209,254,254,0,0,67,254,254,0};
int[] square115={0,254,254,34,0,0,254,254,185,0,0,97,254,254,0,0,30,254,254,0};
int[] square116={0,0,0,0,0,0,254,254,196,0,0,59,254,254,0,0,26,254,254,0};
int[] square117={0,0,0,0,0,0,254,254,199,0,0,31,254,254,0,0,22,254,254,0};
int[] square118={0,55,254,52,0,0,101,254,229,0,0,16,254,254,0,0,16,254,254,0};
int[] square119={1,62,254,132,14,2,32,254,254,15,0,12,254,254,75,1,13,254,254,213};
int[] square120={0,59,254,210,23,0,20,254,254,31,0,8,254,254,141,0,9,254,254,254};
int[] square121={0,0,254,219,40,0,0,254,254,82,0,0,254,254,254,0,0,254,254,254};
int[] square122={0,0,254,254,26,0,0,254,254,147,0,0,254,254,254,0,0,125,254,254};
int[] square123={0,0,254,254,50,0,0,254,254,147,0,0,254,254,254,0,0,123,254,254};
int[] square124={0,0,254,254,113,0,0,254,254,231,0,0,100,254,254,0,0,57,254,254};
int[] square125={0,0,254,254,207,0,0,144,254,254,0,0,20,254,254,0,0,17,178,254};
int[] square126={0,0,57,254,238,0,0,0,0,0,0,0,12,254,254,0,0,13,156,254};
int[] square127={0,0,37,254,205,0,0,21,254,254,0,0,15,254,254,0,0,23,151,254};
int[] square128={0,0,6,254,254,0,0,2,254,254,0,0,0,254,254,0,0,2,163,254};
int[] square129={0,0,0,254,254,0,0,0,254,254,0,0,0,157,254,0,0,0,160,254};
int[] square130={0,0,0,254,254,0,0,0,254,254,0,0,0,130,254,0,0,0,178,254};
int[] square131={0,0,0,254,254,0,0,0,254,254,0,0,0,141,254,0,0,0,128,254};
int[] square132={0,0,0,254,254,0,0,0,254,254,0,0,0,136,254,0,0,0,68,254};
int[] square133={0,0,0,254,254,0,0,0,254,254,0,0,0,130,254,0,0,0,65,254};
int[] square134={0,0,0,254,254,0,0,0,254,254,0,0,0,145,254,0,0,0,0,0};
int[] square135={0,0,0,254,254,0,0,0,254,254,0,0,0,145,254,0,0,0,0,0};
int[] square136={0,0,0,254,254,0,0,0,254,254,0,0,0,145,254,0,0,0,0,0};
int[] square137={0,0,0,254,254,0,0,0,254,254,0,0,0,144,254,0,0,0,0,0};
int[] square138={0,0,0,254,254,0,0,0,254,254,0,0,0,143,254,0,0,0,0,0};
int[] square139={0,0,0,254,254,0,0,0,254,254,0,0,0,146,254,0,0,0,0,0};
int[] square140={0,0,0,254,254,0,0,0,254,254,0,0,0,144,254,0,0,0,0,0};
int[] square141={0,0,0,254,254,0,0,0,254,254,0,0,0,137,254,0,0,0,0,0};
int[] square142={0,0,0,254,254,0,0,0,254,254,0,0,0,164,254,0,0,0,0,0};
int[] square143={0,0,0,254,254,0,0,0,254,254,0,0,0,0,0,0,0,0,0,0};
int[] square144={0,0,0,254,153,0,0,0,254,193,0,0,0,0,0,0,0,0,0,0};
int[] square145={0,0,0,254,0,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0};

int[] triangle1={0,92,254,125,12,0,254,254,254,13,0,54,254,254,85,0,16,254,254,254};
int[] triangle2={0,64,254,138,10,0,254,254,254,17,0,40,254,254,89,0,11,254,254,254};
int[] triangle3={0,50,254,159,13,0,254,254,254,20,0,31,254,254,91,0,9,254,254,254};
int[] triangle4={0,53,254,160,13,0,254,254,254,18,0,34,254,254,90,0,9,254,254,254};
int[] triangle5={0,54,254,162,14,0,254,254,254,17,0,36,254,254,89,0,9,254,254,254};
int[] triangle6={0,56,254,160,15,0,254,254,254,14,0,37,254,254,91,0,9,254,254,254};
int[] triangle7={0,55,254,155,14,0,254,254,254,15,0,39,254,254,89,0,9,254,254,254};
int[] triangle8={0,55,254,142,14,0,254,254,254,14,0,44,254,254,89,0,9,254,254,254};
int[] triangle9={0,51,254,133,12,0,254,254,254,13,0,45,254,254,88,0,10,254,254,254};
int[] triangle10={0,50,254,128,11,0,254,254,254,13,0,46,254,254,84,0,11,254,254,254};
int[] triangle11={0,55,254,126,11,0,254,254,254,13,0,57,254,254,84,0,11,254,254,254};
int[] triangle12={0,59,254,124,9,0,254,254,254,12,0,61,254,254,81,0,12,254,254,254};
int[] triangle13={0,53,254,106,9,0,254,254,254,13,0,66,254,254,79,0,11,254,254,254};
int[] triangle14={0,55,254,107,7,0,254,254,254,13,0,70,254,254,78,0,13,254,254,254};
int[] triangle15={0,54,254,107,8,0,254,254,254,13,0,70,254,254,78,0,12,254,254,254};
int[] triangle16={0,56,254,106,9,0,254,254,254,13,0,71,254,254,78,0,13,254,254,254};
int[] triangle17={0,51,254,98,9,0,254,254,254,12,0,71,254,254,75,0,12,254,254,169};
int[] triangle18={0,57,254,104,10,0,254,254,254,13,0,74,254,254,75,0,13,254,254,170};
int[] triangle19={0,48,254,88,9,0,254,254,254,12,0,74,254,254,74,0,12,254,254,167};
int[] triangle20={0,70,254,88,6,0,254,254,254,12,0,84,254,254,72,0,15,254,254,164};
int[] triangle21={0,71,254,85,6,0,254,254,254,12,0,84,254,254,74,0,15,254,254,169};
int[] triangle22={0,73,254,84,8,0,254,254,254,12,0,85,254,254,74,0,16,254,254,164};
int[] triangle23={0,81,254,83,7,0,254,254,254,11,0,95,254,254,67,0,17,254,254,146};
int[] triangle24={4,87,254,73,6,9,254,254,252,10,6,112,254,254,64,0,20,254,254,143};
int[] triangle25={17,165,44,10,0,30,254,254,237,0,22,135,254,254,0,6,27,254,254,0};
int[] triangle26={22,167,45,6,0,38,254,254,166,0,25,254,254,254,0,7,44,254,254,0};
int[] triangle27={0,0,0,0,0,40,254,254,146,0,22,254,254,254,0,8,64,254,254,0};
int[] triangle28={0,0,0,0,0,45,254,254,125,0,23,254,254,254,0,9,68,254,254,0};
int[] triangle29={0,0,0,0,0,71,254,254,90,0,27,254,254,174,0,11,74,254,254,0};
int[] triangle30={0,0,0,0,0,249,254,254,0,0,29,254,254,0,0,31,219,254,0,0};
int[] triangle31={0,0,0,0,0,254,254,104,0,0,46,254,254,0,0,49,254,254,0,0};
int[] triangle32={0,0,0,0,0,254,254,132,0,0,61,254,254,0,0,58,254,254,0,0};
int[] triangle33={0,0,0,0,0,254,254,129,0,0,58,254,254,0,0,51,254,254,0,0};
int[] triangle34={0,0,0,0,0,254,254,117,0,0,54,254,254,0,0,45,254,254,0,0};
int[] triangle35={0,0,0,0,0,254,254,121,0,0,51,254,254,0,0,46,254,254,0,0};
int[] triangle36={0,0,0,0,0,254,254,126,0,0,52,254,254,0,0,49,254,254,0,0};
int[] triangle37={0,0,0,0,0,254,254,128,0,0,53,254,254,0,0,49,254,254,0,0};
int[] triangle38={0,0,0,0,0,254,254,133,0,0,52,254,254,0,0,50,254,254,0,0};
int[] triangle39={0,0,0,0,0,254,254,135,0,0,50,254,254,0,0,52,254,254,0,0};
int[] triangle40={0,0,0,0,0,254,254,134,0,0,49,254,254,0,0,50,254,254,0,0};
int[] triangle41={0,0,0,0,0,254,254,136,0,0,51,254,254,0,0,50,254,254,0,0};
int[] triangle42={0,0,0,0,0,254,254,92,0,0,82,254,254,0,0,83,254,254,0,0};
int[] triangle43={0,0,0,0,0,254,254,74,0,0,187,254,254,0,0,92,254,254,0,0};
int[] triangle44={0,0,0,0,0,254,248,59,0,0,254,254,254,0,0,124,254,254,0,0};
int[] triangle45={0,0,0,0,0,254,191,41,0,0,254,254,188,0,0,205,254,254,0,0};
int[] triangle46={251,25,53,0,0,254,185,72,0,0,254,254,166,0,0,254,254,254,0,0};
int[] triangle47={254,31,91,0,0,254,184,87,0,0,254,254,162,0,0,254,254,254,0,0};
int[] triangle48={254,33,111,0,0,254,179,87,0,0,254,254,151,0,0,254,254,254,0,0};
int[] triangle49={254,44,137,0,0,254,178,98,0,0,254,254,147,0,0,254,254,254,0,0};
int[] triangle50={254,141,225,0,0,254,195,83,0,0,254,254,132,0,0,254,254,254,0,0};
int[] triangle51={254,183,254,0,0,254,193,73,0,0,254,254,111,0,0,254,254,254,0,0};
int[] triangle52={250,152,254,22,0,254,180,84,2,0,254,254,73,0,0,254,254,254,8,0};
int[] triangle53={253,160,254,0,0,254,176,85,0,0,254,254,63,0,0,254,254,245,0,0};
int[] triangle54={247,162,254,0,0,254,174,83,0,0,254,254,60,0,0,254,254,247,0,0};
int[] triangle55={254,180,254,0,0,254,175,76,0,0,254,254,49,0,0,254,254,218,0,0};
int[] triangle56={254,186,254,0,0,254,174,76,0,0,254,254,41,0,0,254,254,216,0,0};
int[] triangle57={254,186,254,0,0,254,170,78,0,0,254,254,41,0,0,254,254,190,0,0};
int[] triangle58={254,182,254,0,0,254,163,78,0,0,254,254,45,0,0,254,254,197,0,0};
int[] triangle59={206,157,254,0,0,254,159,76,0,0,254,254,54,0,0,254,254,254,0,0};
int[] triangle60={219,154,254,0,0,254,146,77,0,0,254,254,55,0,0,254,254,224,0,0};
int[] triangle61={221,159,254,0,0,254,142,67,0,0,254,254,53,0,0,254,254,181,0,0};
int[] triangle62={231,182,254,0,0,254,149,48,0,0,254,254,28,0,0,254,254,52,0,0};
int[] triangle63={233,183,254,0,0,254,148,44,0,0,254,254,28,0,0,254,254,48,0,0};
int[] triangle64={235,187,247,0,0,254,144,41,0,0,254,254,26,0,0,254,254,48,0,0};
int[] triangle65={233,182,239,0,0,254,133,37,0,0,254,254,27,0,0,254,254,49,0,0};
int[] triangle66={241,178,201,0,0,254,118,30,0,0,254,254,26,0,0,254,254,48,0,0};
int[] triangle67={236,148,123,0,0,254,84,23,0,0,254,240,22,0,0,192,254,23,0,0};
int[] triangle68={237,137,123,0,0,254,64,23,0,0,254,197,25,0,0,188,254,24,0,0};
int[] triangle69={236,144,126,0,0,254,62,21,0,0,254,195,24,0,0,180,254,22,0,0};
int[] triangle70={236,160,138,0,0,254,62,19,0,0,254,204,23,0,0,166,254,20,0,0};
int[] triangle71={220,149,137,0,0,254,55,20,0,0,254,189,24,0,0,161,254,22,0,0};
int[] triangle72={198,150,138,0,0,254,53,22,0,0,254,162,29,0,0,164,254,23,0,0};
int[] triangle73={190,150,194,0,0,254,42,27,0,0,254,103,40,0,0,175,254,29,0,0};
int[] triangle74={170,132,254,0,0,254,26,35,0,0,254,34,56,0,0,133,10,24,0,0};
int[] triangle75={106,152,254,0,0,254,33,52,0,0,254,37,64,0,0,71,13,32,0,0};
int[] triangle76={0,149,254,0,0,0,0,0,0,0,0,27,54,0,0,0,18,49,0,0};
int[] triangle77={1,89,254,0,0,0,0,0,0,0,0,27,53,0,0,0,18,50,0,0};
int[] triangle78={0,0,0,0,0,0,14,0,0,0,0,31,0,0,0,0,45,0,0,0};
int[] triangle79={0,0,0,0,0,0,18,0,0,0,0,45,0,0,0,0,48,0,0,0};
int[] triangle80={0,0,0,0,0,0,23,0,0,0,0,55,0,0,0,0,45,0,0,0};
int[] triangle81={0,0,0,0,0,0,19,0,0,0,0,48,0,0,0,0,43,0,0,0};
int[] triangle82={0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,0,50,0,0,0};
int[] triangle83={254,99,0,0,0,254,97,0,0,0,254,204,0,0,0,172,254,0,0,0};
int[] triangle84={254,140,0,0,0,254,115,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle85={254,154,7,0,0,254,121,9,0,0,254,254,1,0,0,254,254,9,0,0};
int[] triangle86={254,214,69,0,0,254,129,18,0,0,254,254,10,0,0,254,254,19,0,0};
int[] triangle87={254,206,80,0,0,254,140,23,0,0,254,254,12,0,0,254,254,22,0,0};
int[] triangle88={254,138,49,0,0,254,138,36,0,0,254,254,17,0,0,254,254,33,0,0};
int[] triangle89={254,117,46,0,0,254,133,38,0,0,254,254,17,0,0,254,254,34,0,0};
int[] triangle90={254,116,47,0,0,254,138,37,0,0,254,254,16,0,0,254,254,34,0,0};
int[] triangle91={254,132,36,0,0,254,153,27,0,0,254,254,11,0,0,254,254,24,0,0};
int[] triangle92={254,130,23,0,0,254,159,16,0,0,254,254,6,0,0,254,254,14,0,0};
int[] triangle93={254,96,0,0,0,254,143,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle94={254,111,0,0,0,254,149,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle95={254,120,0,0,0,254,157,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle96={254,106,0,0,0,254,162,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle97={219,70,0,0,0,254,171,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle98={78,23,0,0,0,254,176,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle99={0,0,0,0,0,254,183,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle100={0,0,0,0,0,254,186,0,0,0,254,254,0,0,0,254,254,0,0,0};
int[] triangle101={0,0,0,0,0,254,191,12,0,0,254,254,9,0,0,254,254,128,0,0};
int[] triangle102={0,0,0,0,0,254,199,31,0,0,254,254,43,0,0,144,254,254,0,0};
int[] triangle103={0,0,0,0,0,254,213,35,0,0,254,254,84,0,0,128,254,254,0,0};
int[] triangle104={0,0,0,0,0,254,254,46,0,0,135,254,123,0,0,79,254,254,0,0};
int[] triangle105={0,0,0,0,0,254,254,51,0,0,95,254,138,0,0,87,254,254,0,0};
int[] triangle106={0,0,0,0,0,254,254,59,0,0,92,254,145,0,0,92,254,254,0,0};
int[] triangle107={0,0,0,0,0,254,254,64,0,0,123,254,155,0,0,86,254,254,0,0};
int[] triangle108={0,0,0,0,0,254,254,62,0,0,122,254,155,0,0,86,254,254,0,0};
int[] triangle109={0,0,0,0,0,254,254,62,9,0,99,254,148,18,0,80,254,254,46,0};
int[] triangle110={254,12,3,0,0,254,254,61,11,0,122,254,150,21,0,99,254,254,57,0};
int[] triangle111={254,32,12,0,0,254,254,64,7,0,123,254,156,13,0,107,254,254,35,0};
int[] triangle112={254,31,11,0,0,254,254,67,9,0,147,254,153,16,0,106,254,254,58,0};
int[] triangle113={254,31,10,0,0,254,254,73,12,0,149,254,155,18,0,101,254,254,84,0};
int[] triangle114={254,47,14,0,0,254,254,82,12,0,142,254,160,18,0,89,254,254,87,0};
int[] triangle115={254,50,18,0,0,254,254,87,13,0,137,254,179,19,0,82,254,254,87,0};
int[] triangle116={254,254,132,9,0,254,254,254,28,0,25,254,254,78,0,25,254,254,254,0};
int[] triangle117={254,254,191,39,0,101,254,254,120,0,13,254,254,254,0,16,254,254,254,0};
int[] triangle118={254,254,254,46,0,71,254,254,146,0,10,254,254,254,0,15,156,254,254,0};
int[] triangle119={215,254,254,55,0,29,254,254,153,0,9,254,254,254,0,15,149,254,254,0};
int[] triangle120={101,254,254,59,0,18,254,254,155,0,9,254,254,254,0,10,104,254,254,0};
int[] triangle121={3,254,254,66,0,0,254,254,163,0,0,254,254,254,0,0,61,254,254,0};
int[] triangle122={0,254,254,63,0,0,254,254,172,1,0,123,254,254,14,0,41,254,254,47};
int[] triangle123={0,254,254,93,9,0,254,254,218,10,0,76,254,254,60,0,37,254,254,179};
int[] triangle124={0,254,254,112,12,0,254,254,251,12,0,47,254,254,75,0,34,254,254,254};
int[] triangle125={0,254,254,117,14,0,254,254,254,18,0,34,254,254,85,0,28,254,254,254};
int[] triangle126={0,254,254,134,18,0,128,254,254,23,0,17,254,254,105,0,20,254,254,254};
int[] triangle127={0,203,254,159,25,0,24,254,254,18,0,8,254,254,128,0,13,254,254,254};
int[] triangle128={0,118,254,179,22,0,21,254,254,21,0,8,254,254,141,0,13,254,254,254};
int[] triangle129={0,76,254,202,24,0,11,254,254,33,0,4,254,254,148,0,7,254,254,254};
int[] triangle130={0,77,254,213,26,0,11,254,254,36,0,5,254,254,152,0,7,254,254,254};
int[] triangle131={0,44,254,206,33,0,9,254,254,59,0,3,254,254,224,0,6,254,254,254};
int[] triangle132={0,43,254,210,38,0,8,254,254,71,0,3,254,254,249,0,5,254,254,254};
int[] triangle133={0,38,254,210,39,0,9,254,254,78,0,2,254,254,254,0,5,254,254,254};
int[] triangle134={0,32,254,213,40,0,7,254,254,81,0,2,254,254,254,0,4,254,254,254};
int[] triangle135={0,28,254,216,41,0,6,254,254,84,0,2,254,254,254,0,4,254,254,254};
int[] triangle136={0,27,254,220,40,0,6,254,254,91,0,2,254,254,254,0,2,105,254,254};
int[] triangle137={0,30,254,217,40,0,6,254,254,111,0,4,254,254,254,0,1,86,254,254};
int[] triangle138={0,0,254,227,46,0,0,254,254,138,0,0,155,254,254,0,0,67,254,254};
int[] triangle139={0,0,254,226,51,0,0,254,254,158,0,0,93,254,254,0,0,74,201,254};
int[] triangle140={0,0,254,248,62,0,0,254,254,185,0,0,91,254,254,0,0,64,176,254};
int[] triangle141={0,0,254,254,73,0,0,254,254,201,0,0,70,254,254,0,0,60,180,254};
int[] triangle142={0,0,254,254,69,0,0,254,254,207,0,0,68,254,254,0,0,64,188,254};
int[] triangle143={0,0,254,254,69,0,0,254,254,212,0,0,71,254,254,0,0,64,187,254};
                  
                
// thresholds
int AREASIZE_THRESHOLD=5;
int IMPEDANCE_THRESHOLD=30;
int IMPEDANCE_INITIAL_VAL = 211;

//graphical attributes
final int WINDOW_SIZE_X=800;
final int WINDOW_SIZE_Y=800;
final int WINDOW_SIZE_X_sc=1000;
final int WINDOW_SIZE_Y_sc=1000;
final int ELECTRODE_SIZE=40;

float x, y,  x1, y1, x2, y2, count=0, theta=0;
int count2=0;
color statuscolor;
int timer=0, FirstTime=0;
int[] stimulation = new int[ELECTRODE_NUM];
int[] impedance = new int[ELECTRODE_NUM];
int[] impedance_offset =  new int[ELECTRODE_NUM];
int[] impedance_diff = new int[ELECTRODE_NUM];
int[] stim_feedback_random = new int[2*ELECTRODE_NUM];


int  AreaSize;
float CoGX, CoGY, Sum;
int Volume = 0;
float factor = 0;
int factor_counter=0;
int speed = 60;
int value_radialbutton;

               
                
//send stimulation signal to ESP32
 void SendStimulationSignala()
{
  int pin;

  myPort.write((byte)PC_ESP32_STIM_PATTERN); 
  for (pin=0; pin<ELECTRODE_NUM; pin++) {
    myPort.write((byte)stimulation[pin]);
  }
  myPort.write((byte)Volume);
  if (experiment2==true) { myPort.write((byte)0); }
  else {myPort.write((byte)Factors[factor_counter]);}
}

                

void SendStimulationSignalb()
{
  int pin;

  myPort.write((byte)PC_ESP32_STIM_PATTERN); 
  for (pin=0; pin<ELECTRODE_NUM; pin++) {
    myPort.write((byte)0);
  }
  myPort.write((byte)0);
  myPort.write((byte)0);
}

                
// patern convertion to array                
void Patern_to_array() {
  for (i = 0; i < sen_cols; i++) {
    for (j = 0; j < sen_rows; j++) {
          sensor_mat[j][i] = sensor_1[i*sen_rows+j];
          sensor2_mat[j][i] = sensor_2[i*sen_rows+j];
          sensor3_mat[j][i] = sensor_3[i*sen_rows+j];
    }
  }
}

void Patern_to_array2() {
  for (int k = 0; k < number_fingers; k++){
  for (i = 0; i < sen_cols; i++) {
    for (j = 0; j < sen_rows; j++) {
          switch(k){
              case 0: sensor_mat[j][i] = data[k][i][j+3]; println(sensor_mat[j][i]); break;
              case 1: sensor3_mat[j][i]= data[k][i][j+3]; println(sensor3_mat[j][i]); break;
              case 2: sensor2_mat[j][i]= data[k][i][j+3]; println(sensor2_mat[j][i]); break;
          }

    }
  }
  }  
}

void Patern_to_array3() {
  for (i = 0; i < sen_cols-1; i++) {
    for (j = 0; j < sen_rows-1; j++) {
          sensor_mat[j][i] = sensor_1[i*(sen_rows-1)+j];
          sensor2_mat[j][i] = sensor_2[i*(sen_rows-1)+j];
          sensor3_mat[j][i] = sensor_3[i*(sen_rows-1)+j];
    }
  }
}

 
 void reduction_transformation2() {
    for (i = 0; i < red_cols; i++) {
        for (j = 0; j < red_rows; j++) {
    
        //reducted_mat[j][i] = abs((a * d) - (c * b))/255;   // it is necesary analize how get a good comparison of the determinant
        reducted_mat[j][i] = sensor_mat[j][i];  
        
        reducted2_mat[j][i] = sensor2_mat[j][i]; 
        
        reducted3_mat[j][i] = sensor3_mat[j][i]; 
      }
    }
 }
 


//filter matriz
void filter_array() {
for (i = 0; i < red_cols; i++) {
  for (j = 0; j < red_rows; j++) {
        pressure=reducted_mat[j][i];
        p_relation= pressure/P_max;
        rand_relation=random(0,Rand_max+1)/Rand_max;
       if (p_relation > Factors[factor_counter]*rand_relation){
       //if (p_relation > 0.6){
          filtered_mat[j][i]=255;
        }
        else{
          filtered_mat[j][i]=0;
        }
  }
}

for (i = 0; i < red_cols; i++) {
  for (j = 0; j < red_rows; j++) {
        pressure=reducted2_mat[j][i];
        p_relation= pressure/P_max;
        rand_relation=random(0,Rand_max+1)/Rand_max;
       if (p_relation > Factors[factor_counter]*rand_relation){
       //if (p_relation > 0.6){
          filtered2_mat[j][i]=255;
        }
        else{
          filtered2_mat[j][i]=0;
        }
  }
}

for (i = 0; i < red_cols; i++) {
  for (j = 0; j < red_rows; j++) {
        pressure=reducted3_mat[j][i];
        p_relation= pressure/P_max;
        rand_relation=random(0,Rand_max+1)/Rand_max;
       if (p_relation > Factors[factor_counter]*rand_relation){
       //if (p_relation > 0.6){
          filtered3_mat[j][i]=255;
        }
        else{
          filtered3_mat[j][i]=0;
        }
  }
}

}

// tranformation array to patern
void array_to_patern() {
  for (i = 0; i < red_cols; i++) {
    for (j = 0; j < red_rows; j++) {
          //patern_filter[i*red_rows+j]=filtered_mat[j][i];
          patern_filter[i*red_rows+j]=reducted_mat[j][i];
          
          //patern2_filter[i*red_rows+j]=filtered2_mat[j][i];
          patern2_filter[i*red_rows+j]=reducted2_mat[j][i];
          
          //patern3_filter[i*red_rows+j]=filtered3_mat[j][i];
          patern3_filter[i*red_rows+j]=reducted3_mat[j][i];
    }
  }
  
  
}

void matrix_generator_8(){
  
  
  int pin;
  count2+=1;
  if (count2==speed){
    count+=1;
    count2=0;
  }
    if (count>=187) {count=0;}
  array_to_patern();
        
        switch(int(count)){
case(0):sensor_1=hexa1; break;
case(1):sensor_1=hexa2; break;
case(2):sensor_1=hexa3; break;
case(3):sensor_1=hexa4; break;
case(4):sensor_1=hexa5; break;
case(5):sensor_1=hexa6; break;
case(6):sensor_1=hexa7; break;
case(7):sensor_1=hexa8; break;
case(8):sensor_1=hexa9; break;
case(9):sensor_1=hexa10; break;
case(10):sensor_1=hexa11; break;
case(11):sensor_1=hexa12; break;
case(12):sensor_1=hexa13; break;
case(13):sensor_1=hexa14; break;
case(14):sensor_1=hexa15; break;
case(15):sensor_1=hexa16; break;
case(16):sensor_1=hexa17; break;
case(17):sensor_1=hexa18; break;
case(18):sensor_1=hexa19; break;
case(19):sensor_1=hexa20; break;
case(20):sensor_1=hexa21; break;
case(21):sensor_1=hexa22; break;
case(22):sensor_1=hexa23; break;
case(23):sensor_1=hexa24; break;
case(24):sensor_1=hexa25; break;
case(25):sensor_1=hexa26; break;
case(26):sensor_1=hexa27; break;
case(27):sensor_1=hexa28; break;
case(28):sensor_1=hexa29; break;
case(29):sensor_1=hexa30; break;
case(30):sensor_1=hexa31; break;
case(31):sensor_1=hexa32; break;
case(32):sensor_1=hexa33; break;
case(33):sensor_1=hexa34; break;
case(34):sensor_1=hexa35; break;
case(35):sensor_1=hexa36; break;
case(36):sensor_1=hexa37; break;
case(37):sensor_1=hexa38; break;
case(38):sensor_1=hexa39; break;
case(39):sensor_1=hexa40; break;
case(40):sensor_1=hexa41; break;
case(41):sensor_1=hexa42; break;
case(42):sensor_1=hexa43; break;
case(43):sensor_1=hexa44; break;
case(44):sensor_1=hexa45; break;
case(45):sensor_1=hexa46; break;
case(46):sensor_1=hexa47; break;
case(47):sensor_1=hexa48; break;
case(48):sensor_1=hexa49; break;
case(49):sensor_1=hexa50; break;
case(50):sensor_1=hexa51; break;
case(51):sensor_1=hexa52; break;
case(52):sensor_1=hexa53; break;
case(53):sensor_1=hexa54; break;
case(54):sensor_1=hexa55; break;
case(55):sensor_1=hexa56; break;
case(56):sensor_1=hexa57; break;
case(57):sensor_1=hexa58; break;
case(58):sensor_1=hexa59; break;
case(59):sensor_1=hexa60; break;
case(60):sensor_1=hexa61; break;
case(61):sensor_1=hexa62; break;
case(62):sensor_1=hexa63; break;
case(63):sensor_1=hexa64; break;
case(64):sensor_1=hexa65; break;
case(65):sensor_1=hexa66; break;
case(66):sensor_1=hexa67; break;
case(67):sensor_1=hexa68; break;
case(68):sensor_1=hexa69; break;
case(69):sensor_1=hexa70; break;
case(70):sensor_1=hexa71; break;
case(71):sensor_1=hexa72; break;
case(72):sensor_1=hexa73; break;
case(73):sensor_1=hexa74; break;
case(74):sensor_1=hexa75; break;
case(75):sensor_1=hexa76; break;
case(76):sensor_1=hexa77; break;
case(77):sensor_1=hexa78; break;
case(78):sensor_1=hexa79; break;
case(79):sensor_1=hexa80; break;
case(80):sensor_1=hexa81; break;
case(81):sensor_1=hexa82; break;
case(82):sensor_1=hexa83; break;
case(83):sensor_1=hexa84; break;
case(84):sensor_1=hexa85; break;
case(85):sensor_1=hexa86; break;
case(86):sensor_1=hexa87; break;
case(87):sensor_1=hexa88; break;
case(88):sensor_1=hexa89; break;
case(89):sensor_1=hexa90; break;
case(90):sensor_1=hexa91; break;
case(91):sensor_1=hexa92; break;
case(92):sensor_1=hexa93; break;
case(93):sensor_1=hexa94; break;
case(94):sensor_1=hexa95; break;
case(95):sensor_1=hexa96; break;
case(96):sensor_1=hexa97; break;
case(97):sensor_1=hexa98; break;
case(98):sensor_1=hexa99; break;
case(99):sensor_1=hexa100; break;
case(100):sensor_1=hexa101; break;
case(101):sensor_1=hexa102; break;
case(102):sensor_1=hexa103; break;
case(103):sensor_1=hexa104; break;
case(104):sensor_1=hexa105; break;
case(105):sensor_1=hexa106; break;
case(106):sensor_1=hexa107; break;
case(107):sensor_1=hexa108; break;
case(108):sensor_1=hexa109; break;
case(109):sensor_1=hexa110; break;
case(110):sensor_1=hexa111; break;
case(111):sensor_1=hexa112; break;
case(112):sensor_1=hexa113; break;
case(113):sensor_1=hexa114; break;
case(114):sensor_1=hexa115; break;
case(115):sensor_1=hexa116; break;
case(116):sensor_1=hexa117; break;
case(117):sensor_1=hexa118; break;
case(118):sensor_1=hexa119; break;
case(119):sensor_1=hexa120; break;
case(120):sensor_1=hexa121; break;
case(121):sensor_1=hexa122; break;
case(122):sensor_1=hexa123; break;
case(123):sensor_1=hexa124; break;
case(124):sensor_1=hexa125; break;
case(125):sensor_1=hexa126; break;
case(126):sensor_1=hexa127; break;
case(127):sensor_1=hexa128; break;
case(128):sensor_1=hexa129; break;
case(129):sensor_1=hexa130; break;
case(130):sensor_1=hexa131; break;
case(131):sensor_1=hexa132; break;
case(132):sensor_1=hexa133; break;
case(133):sensor_1=hexa134; break;
case(134):sensor_1=hexa135; break;
case(135):sensor_1=hexa136; break;
case(136):sensor_1=hexa137; break;
case(137):sensor_1=hexa138; break;
case(138):sensor_1=hexa139; break;
case(139):sensor_1=hexa140; break;
case(140):sensor_1=hexa141; break;
case(141):sensor_1=hexa142; break;
case(142):sensor_1=hexa143; break;
case(143):sensor_1=hexa144; break;
case(144):sensor_1=hexa145; break;
case(145):sensor_1=hexa146; break;
case(146):sensor_1=hexa147; break;
case(147):sensor_1=hexa148; break;
case(148):sensor_1=hexa149; break;
case(149):sensor_1=hexa150; break;
case(150):sensor_1=hexa151; break;
case(151):sensor_1=hexa152; break;
case(152):sensor_1=hexa153; break;
case(153):sensor_1=hexa154; break;
case(154):sensor_1=hexa155; break;
case(155):sensor_1=hexa156; break;
case(156):sensor_1=hexa157; break;
case(157):sensor_1=hexa158; break;
case(158):sensor_1=hexa159; break;
case(159):sensor_1=hexa160; break;
case(160):sensor_1=hexa161; break;
case(161):sensor_1=hexa162; break;
case(162):sensor_1=hexa163; break;
case(163):sensor_1=hexa164; break;
case(164):sensor_1=hexa165; break;
case(165):sensor_1=hexa166; break;
case(166):sensor_1=hexa167; break;
case(167):sensor_1=hexa168; break;
case(168):sensor_1=hexa169; break;
case(169):sensor_1=hexa170; break;
case(170):sensor_1=hexa171; break;
case(171):sensor_1=hexa172; break;
case(172):sensor_1=hexa173; break;
case(173):sensor_1=hexa174; break;
case(174):sensor_1=hexa175; break;
case(175):sensor_1=hexa176; break;
case(176):sensor_1=hexa177; break;
case(177):sensor_1=hexa178; break;
case(178):sensor_1=hexa179; break;
case(179):sensor_1=hexa180; break;
case(180):sensor_1=hexa181; break;
case(181):sensor_1=hexa182; break;
case(182):sensor_1=hexa183; break;
case(183):sensor_1=hexa184; break;
case(184):sensor_1=hexa185; break;
case(185):sensor_1=hexa186; break;
case(186):sensor_1=hexa187; break;

        }
   sensor_2=sensor_1;
   sensor_3=sensor_1;
   Patern_to_array3();
   reduction_transformation2();
   array_to_patern();
      
  for (pin=0; pin<20; pin++) {
    stimulation[pin]=patern_filter[pin];
    stimulation[pin + 21]=patern_filter[pin];
    stimulation[pin + 42]=patern_filter[pin];
  }
}

void matrix_generator_9(){
  
  
  int pin;
  count2+=1;
  if (count2==speed){
    count+=1;
    count2=0;
  }
       if (count>=143) {count=0;}
  array_to_patern();
        
        switch(int(count)){
case(0):sensor_1=triangle1; break;
case(1):sensor_1=triangle2; break;
case(2):sensor_1=triangle3; break;
case(3):sensor_1=triangle4; break;
case(4):sensor_1=triangle5; break;
case(5):sensor_1=triangle6; break;
case(6):sensor_1=triangle7; break;
case(7):sensor_1=triangle8; break;
case(8):sensor_1=triangle9; break;
case(9):sensor_1=triangle10; break;
case(10):sensor_1=triangle11; break;
case(11):sensor_1=triangle12; break;
case(12):sensor_1=triangle13; break;
case(13):sensor_1=triangle14; break;
case(14):sensor_1=triangle15; break;
case(15):sensor_1=triangle16; break;
case(16):sensor_1=triangle17; break;
case(17):sensor_1=triangle18; break;
case(18):sensor_1=triangle19; break;
case(19):sensor_1=triangle20; break;
case(20):sensor_1=triangle21; break;
case(21):sensor_1=triangle22; break;
case(22):sensor_1=triangle23; break;
case(23):sensor_1=triangle24; break;
case(24):sensor_1=triangle25; break;
case(25):sensor_1=triangle26; break;
case(26):sensor_1=triangle27; break;
case(27):sensor_1=triangle28; break;
case(28):sensor_1=triangle29; break;
case(29):sensor_1=triangle30; break;
case(30):sensor_1=triangle31; break;
case(31):sensor_1=triangle32; break;
case(32):sensor_1=triangle33; break;
case(33):sensor_1=triangle34; break;
case(34):sensor_1=triangle35; break;
case(35):sensor_1=triangle36; break;
case(36):sensor_1=triangle37; break;
case(37):sensor_1=triangle38; break;
case(38):sensor_1=triangle39; break;
case(39):sensor_1=triangle40; break;
case(40):sensor_1=triangle41; break;
case(41):sensor_1=triangle42; break;
case(42):sensor_1=triangle43; break;
case(43):sensor_1=triangle44; break;
case(44):sensor_1=triangle45; break;
case(45):sensor_1=triangle46; break;
case(46):sensor_1=triangle47; break;
case(47):sensor_1=triangle48; break;
case(48):sensor_1=triangle49; break;
case(49):sensor_1=triangle50; break;
case(50):sensor_1=triangle51; break;
case(51):sensor_1=triangle52; break;
case(52):sensor_1=triangle53; break;
case(53):sensor_1=triangle54; break;
case(54):sensor_1=triangle55; break;
case(55):sensor_1=triangle56; break;
case(56):sensor_1=triangle57; break;
case(57):sensor_1=triangle58; break;
case(58):sensor_1=triangle59; break;
case(59):sensor_1=triangle60; break;
case(60):sensor_1=triangle61; break;
case(61):sensor_1=triangle62; break;
case(62):sensor_1=triangle63; break;
case(63):sensor_1=triangle64; break;
case(64):sensor_1=triangle65; break;
case(65):sensor_1=triangle66; break;
case(66):sensor_1=triangle67; break;
case(67):sensor_1=triangle68; break;
case(68):sensor_1=triangle69; break;
case(69):sensor_1=triangle70; break;
case(70):sensor_1=triangle71; break;
case(71):sensor_1=triangle72; break;
case(72):sensor_1=triangle73; break;
case(73):sensor_1=triangle74; break;
case(74):sensor_1=triangle75; break;
case(75):sensor_1=triangle76; break;
case(76):sensor_1=triangle77; break;
case(77):sensor_1=triangle78; break;
case(78):sensor_1=triangle79; break;
case(79):sensor_1=triangle80; break;
case(80):sensor_1=triangle81; break;
case(81):sensor_1=triangle82; break;
case(82):sensor_1=triangle83; break;
case(83):sensor_1=triangle84; break;
case(84):sensor_1=triangle85; break;
case(85):sensor_1=triangle86; break;
case(86):sensor_1=triangle87; break;
case(87):sensor_1=triangle88; break;
case(88):sensor_1=triangle89; break;
case(89):sensor_1=triangle90; break;
case(90):sensor_1=triangle91; break;
case(91):sensor_1=triangle92; break;
case(92):sensor_1=triangle93; break;
case(93):sensor_1=triangle94; break;
case(94):sensor_1=triangle95; break;
case(95):sensor_1=triangle96; break;
case(96):sensor_1=triangle97; break;
case(97):sensor_1=triangle98; break;
case(98):sensor_1=triangle99; break;
case(99):sensor_1=triangle100; break;
case(100):sensor_1=triangle101; break;
case(101):sensor_1=triangle102; break;
case(102):sensor_1=triangle103; break;
case(103):sensor_1=triangle104; break;
case(104):sensor_1=triangle105; break;
case(105):sensor_1=triangle106; break;
case(106):sensor_1=triangle107; break;
case(107):sensor_1=triangle108; break;
case(108):sensor_1=triangle109; break;
case(109):sensor_1=triangle110; break;
case(110):sensor_1=triangle111; break;
case(111):sensor_1=triangle112; break;
case(112):sensor_1=triangle113; break;
case(113):sensor_1=triangle114; break;
case(114):sensor_1=triangle115; break;
case(115):sensor_1=triangle116; break;
case(116):sensor_1=triangle117; break;
case(117):sensor_1=triangle118; break;
case(118):sensor_1=triangle119; break;
case(119):sensor_1=triangle120; break;
case(120):sensor_1=triangle121; break;
case(121):sensor_1=triangle122; break;
case(122):sensor_1=triangle123; break;
case(123):sensor_1=triangle124; break;
case(124):sensor_1=triangle125; break;
case(125):sensor_1=triangle126; break;
case(126):sensor_1=triangle127; break;
case(127):sensor_1=triangle128; break;
case(128):sensor_1=triangle129; break;
case(129):sensor_1=triangle130; break;
case(130):sensor_1=triangle131; break;
case(131):sensor_1=triangle132; break;
case(132):sensor_1=triangle133; break;
case(133):sensor_1=triangle134; break;
case(134):sensor_1=triangle135; break;
case(135):sensor_1=triangle136; break;
case(136):sensor_1=triangle137; break;
case(137):sensor_1=triangle138; break;
case(138):sensor_1=triangle139; break;
case(139):sensor_1=triangle140; break;
case(140):sensor_1=triangle141; break;
case(141):sensor_1=triangle142; break;
case(142):sensor_1=triangle143; break;



        }
   sensor_2=sensor_1;
   sensor_3=sensor_1;
   Patern_to_array3();
   reduction_transformation2();
   array_to_patern();
      
  for (pin=0; pin<20; pin++) {
    stimulation[pin]=patern_filter[pin];
    stimulation[pin + 21]=patern_filter[pin];
    stimulation[pin + 42]=patern_filter[pin];
  }
}

void matrix_generator_10(){
  
  
  int pin;
  count2+=1;
  if (count2==speed){
    count+=1;
    count2=0;
  }
    if (count>=145) {count=0;}
  array_to_patern();
        
        switch(int(count)){
case(0):sensor_1=square1; break;
case(1):sensor_1=square2; break;
case(2):sensor_1=square3; break;
case(3):sensor_1=square4; break;
case(4):sensor_1=square5; break;
case(5):sensor_1=square6; break;
case(6):sensor_1=square7; break;
case(7):sensor_1=square8; break;
case(8):sensor_1=square9; break;
case(9):sensor_1=square10; break;
case(10):sensor_1=square11; break;
case(11):sensor_1=square12; break;
case(12):sensor_1=square13; break;
case(13):sensor_1=square14; break;
case(14):sensor_1=square15; break;
case(15):sensor_1=square16; break;
case(16):sensor_1=square17; break;
case(17):sensor_1=square18; break;
case(18):sensor_1=square19; break;
case(19):sensor_1=square20; break;
case(20):sensor_1=square21; break;
case(21):sensor_1=square22; break;
case(22):sensor_1=square23; break;
case(23):sensor_1=square24; break;
case(24):sensor_1=square25; break;
case(25):sensor_1=square26; break;
case(26):sensor_1=square27; break;
case(27):sensor_1=square28; break;
case(28):sensor_1=square29; break;
case(29):sensor_1=square30; break;
case(30):sensor_1=square31; break;
case(31):sensor_1=square32; break;
case(32):sensor_1=square33; break;
case(33):sensor_1=square34; break;
case(34):sensor_1=square35; break;
case(35):sensor_1=square36; break;
case(36):sensor_1=square37; break;
case(37):sensor_1=square38; break;
case(38):sensor_1=square39; break;
case(39):sensor_1=square40; break;
case(40):sensor_1=square41; break;
case(41):sensor_1=square42; break;
case(42):sensor_1=square43; break;
case(43):sensor_1=square44; break;
case(44):sensor_1=square45; break;
case(45):sensor_1=square46; break;
case(46):sensor_1=square47; break;
case(47):sensor_1=square48; break;
case(48):sensor_1=square49; break;
case(49):sensor_1=square50; break;
case(50):sensor_1=square51; break;
case(51):sensor_1=square52; break;
case(52):sensor_1=square53; break;
case(53):sensor_1=square54; break;
case(54):sensor_1=square55; break;
case(55):sensor_1=square56; break;
case(56):sensor_1=square57; break;
case(57):sensor_1=square58; break;
case(58):sensor_1=square59; break;
case(59):sensor_1=square60; break;
case(60):sensor_1=square61; break;
case(61):sensor_1=square62; break;
case(62):sensor_1=square63; break;
case(63):sensor_1=square64; break;
case(64):sensor_1=square65; break;
case(65):sensor_1=square66; break;
case(66):sensor_1=square67; break;
case(67):sensor_1=square68; break;
case(68):sensor_1=square69; break;
case(69):sensor_1=square70; break;
case(70):sensor_1=square71; break;
case(71):sensor_1=square72; break;
case(72):sensor_1=square73; break;
case(73):sensor_1=square74; break;
case(74):sensor_1=square75; break;
case(75):sensor_1=square76; break;
case(76):sensor_1=square77; break;
case(77):sensor_1=square78; break;
case(78):sensor_1=square79; break;
case(79):sensor_1=square80; break;
case(80):sensor_1=square81; break;
case(81):sensor_1=square82; break;
case(82):sensor_1=square83; break;
case(83):sensor_1=square84; break;
case(84):sensor_1=square85; break;
case(85):sensor_1=square86; break;
case(86):sensor_1=square87; break;
case(87):sensor_1=square88; break;
case(88):sensor_1=square89; break;
case(89):sensor_1=square90; break;
case(90):sensor_1=square91; break;
case(91):sensor_1=square92; break;
case(92):sensor_1=square93; break;
case(93):sensor_1=square94; break;
case(94):sensor_1=square95; break;
case(95):sensor_1=square96; break;
case(96):sensor_1=square97; break;
case(97):sensor_1=square98; break;
case(98):sensor_1=square99; break;
case(99):sensor_1=square100; break;
case(100):sensor_1=square101; break;
case(101):sensor_1=square102; break;
case(102):sensor_1=square103; break;
case(103):sensor_1=square104; break;
case(104):sensor_1=square105; break;
case(105):sensor_1=square106; break;
case(106):sensor_1=square107; break;
case(107):sensor_1=square108; break;
case(108):sensor_1=square109; break;
case(109):sensor_1=square110; break;
case(110):sensor_1=square111; break;
case(111):sensor_1=square112; break;
case(112):sensor_1=square113; break;
case(113):sensor_1=square114; break;
case(114):sensor_1=square115; break;
case(115):sensor_1=square116; break;
case(116):sensor_1=square117; break;
case(117):sensor_1=square118; break;
case(118):sensor_1=square119; break;
case(119):sensor_1=square120; break;
case(120):sensor_1=square121; break;
case(121):sensor_1=square122; break;
case(122):sensor_1=square123; break;
case(123):sensor_1=square124; break;
case(124):sensor_1=square125; break;
case(125):sensor_1=square126; break;
case(126):sensor_1=square127; break;
case(127):sensor_1=square128; break;
case(128):sensor_1=square129; break;
case(129):sensor_1=square130; break;
case(130):sensor_1=square131; break;
case(131):sensor_1=square132; break;
case(132):sensor_1=square133; break;
case(133):sensor_1=square134; break;
case(134):sensor_1=square135; break;
case(135):sensor_1=square136; break;
case(136):sensor_1=square137; break;
case(137):sensor_1=square138; break;
case(138):sensor_1=square139; break;
case(139):sensor_1=square140; break;
case(140):sensor_1=square141; break;
case(141):sensor_1=square142; break;
case(142):sensor_1=square143; break;
case(143):sensor_1=square144; break;
case(144):sensor_1=square145; break;

        }
   sensor_2=sensor_1;
   sensor_3=sensor_1;
   Patern_to_array3();
   reduction_transformation2();
   array_to_patern();
      
  for (pin=0; pin<20; pin++) {
    stimulation[pin]=patern_filter[pin];
    stimulation[pin + 21]=patern_filter[pin];
    stimulation[pin + 42]=patern_filter[pin];
  }
}

void matrix_generator_11(){
  
  
  int pin;
  count2+=1;
  if (count2==speed){
    count+=1;
    count2=0;
  }
    if (count>=144) {count=0;}
  array_to_patern();
        
        switch(int(count)){
case(0):sensor_1=cilin1; break;
case(1):sensor_1=cilin2; break;
case(2):sensor_1=cilin3; break;
case(3):sensor_1=cilin4; break;
case(4):sensor_1=cilin5; break;
case(5):sensor_1=cilin6; break;
case(6):sensor_1=cilin7; break;
case(7):sensor_1=cilin8; break;
case(8):sensor_1=cilin9; break;
case(9):sensor_1=cilin10; break;
case(10):sensor_1=cilin11; break;
case(11):sensor_1=cilin12; break;
case(12):sensor_1=cilin13; break;
case(13):sensor_1=cilin14; break;
case(14):sensor_1=cilin15; break;
case(15):sensor_1=cilin16; break;
case(16):sensor_1=cilin17; break;
case(17):sensor_1=cilin18; break;
case(18):sensor_1=cilin19; break;
case(19):sensor_1=cilin20; break;
case(20):sensor_1=cilin21; break;
case(21):sensor_1=cilin22; break;
case(22):sensor_1=cilin23; break;
case(23):sensor_1=cilin24; break;
case(24):sensor_1=cilin25; break;
case(25):sensor_1=cilin26; break;
case(26):sensor_1=cilin27; break;
case(27):sensor_1=cilin28; break;
case(28):sensor_1=cilin29; break;
case(29):sensor_1=cilin30; break;
case(30):sensor_1=cilin31; break;
case(31):sensor_1=cilin32; break;
case(32):sensor_1=cilin33; break;
case(33):sensor_1=cilin34; break;
case(34):sensor_1=cilin35; break;
case(35):sensor_1=cilin36; break;
case(36):sensor_1=cilin37; break;
case(37):sensor_1=cilin38; break;
case(38):sensor_1=cilin39; break;
case(39):sensor_1=cilin40; break;
case(40):sensor_1=cilin41; break;
case(41):sensor_1=cilin42; break;
case(42):sensor_1=cilin43; break;
case(43):sensor_1=cilin44; break;
case(44):sensor_1=cilin45; break;
case(45):sensor_1=cilin46; break;
case(46):sensor_1=cilin47; break;
case(47):sensor_1=cilin48; break;
case(48):sensor_1=cilin49; break;
case(49):sensor_1=cilin50; break;
case(50):sensor_1=cilin51; break;
case(51):sensor_1=cilin52; break;
case(52):sensor_1=cilin53; break;
case(53):sensor_1=cilin54; break;
case(54):sensor_1=cilin55; break;
case(55):sensor_1=cilin56; break;
case(56):sensor_1=cilin57; break;
case(57):sensor_1=cilin58; break;
case(58):sensor_1=cilin59; break;
case(59):sensor_1=cilin60; break;
case(60):sensor_1=cilin61; break;
case(61):sensor_1=cilin62; break;
case(62):sensor_1=cilin63; break;
case(63):sensor_1=cilin64; break;
case(64):sensor_1=cilin65; break;
case(65):sensor_1=cilin66; break;
case(66):sensor_1=cilin67; break;
case(67):sensor_1=cilin68; break;
case(68):sensor_1=cilin69; break;
case(69):sensor_1=cilin70; break;
case(70):sensor_1=cilin71; break;
case(71):sensor_1=cilin72; break;
case(72):sensor_1=cilin73; break;
case(73):sensor_1=cilin74; break;
case(74):sensor_1=cilin75; break;
case(75):sensor_1=cilin76; break;
case(76):sensor_1=cilin77; break;
case(77):sensor_1=cilin78; break;
case(78):sensor_1=cilin79; break;
case(79):sensor_1=cilin80; break;
case(80):sensor_1=cilin81; break;
case(81):sensor_1=cilin82; break;
case(82):sensor_1=cilin83; break;
case(83):sensor_1=cilin84; break;
case(84):sensor_1=cilin85; break;
case(85):sensor_1=cilin86; break;
case(86):sensor_1=cilin87; break;
case(87):sensor_1=cilin88; break;
case(88):sensor_1=cilin89; break;
case(89):sensor_1=cilin90; break;
case(90):sensor_1=cilin91; break;
case(91):sensor_1=cilin92; break;
case(92):sensor_1=cilin93; break;
case(93):sensor_1=cilin94; break;
case(94):sensor_1=cilin95; break;
case(95):sensor_1=cilin96; break;
case(96):sensor_1=cilin97; break;
case(97):sensor_1=cilin98; break;
case(98):sensor_1=cilin99; break;
case(99):sensor_1=cilin100; break;
case(100):sensor_1=cilin101; break;
case(101):sensor_1=cilin102; break;
case(102):sensor_1=cilin103; break;
case(103):sensor_1=cilin104; break;
case(104):sensor_1=cilin105; break;
case(105):sensor_1=cilin106; break;
case(106):sensor_1=cilin107; break;
case(107):sensor_1=cilin108; break;
case(108):sensor_1=cilin109; break;
case(109):sensor_1=cilin110; break;
case(110):sensor_1=cilin111; break;
case(111):sensor_1=cilin112; break;
case(112):sensor_1=cilin113; break;
case(113):sensor_1=cilin114; break;
case(114):sensor_1=cilin115; break;
case(115):sensor_1=cilin116; break;
case(116):sensor_1=cilin117; break;
case(117):sensor_1=cilin118; break;
case(118):sensor_1=cilin119; break;
case(119):sensor_1=cilin120; break;
case(120):sensor_1=cilin121; break;
case(121):sensor_1=cilin122; break;
case(122):sensor_1=cilin123; break;
case(123):sensor_1=cilin124; break;
case(124):sensor_1=cilin125; break;
case(125):sensor_1=cilin126; break;
case(126):sensor_1=cilin127; break;
case(127):sensor_1=cilin128; break;
case(128):sensor_1=cilin129; break;
case(129):sensor_1=cilin130; break;
case(130):sensor_1=cilin131; break;
case(131):sensor_1=cilin132; break;
case(132):sensor_1=cilin133; break;
case(133):sensor_1=cilin134; break;
case(134):sensor_1=cilin135; break;
case(135):sensor_1=cilin136; break;
case(136):sensor_1=cilin137; break;
case(137):sensor_1=cilin138; break;
case(138):sensor_1=cilin139; break;
case(139):sensor_1=cilin140; break;
case(140):sensor_1=cilin141; break;
case(141):sensor_1=cilin142; break;
case(142):sensor_1=cilin143; break;
case(143):sensor_1=cilin144; break;

        }
   sensor_2=sensor_1;
   sensor_3=sensor_1;
   Patern_to_array3();
   reduction_transformation2();
   array_to_patern();
      
  for (pin=0; pin<20; pin++) {
    stimulation[pin]=patern_filter[pin];
    stimulation[pin + 21]=patern_filter[pin];
    stimulation[pin + 42]=patern_filter[pin];
  }
}


void matrix_generator_read(){
  int pin;
    // generator static frame for each finger
  array_to_patern();
  for (pin=0; pin<20; pin++) {
    stimulation[pin]=patern_filter[pin];
    stimulation[pin + 21]=patern2_filter[pin];
    stimulation[pin + 42]=patern3_filter[pin];
  }
  
}





void settings() {
   size(WINDOW_SIZE_X_sc,WINDOW_SIZE_Y_sc);   
   
}

PFont f,f2,f3,f4;
void setup() { 

  f = createFont("Arial",20,true);
  f2 = createFont("Ziggurat-Black",32,true);
  f3 = createFont("Ziggurat-Black",40,true);
  f4 = createFont("Arial",14,true);
  ControlFont font = new ControlFont(f);
  
  int pin, value_radialbutton;
  
  //tcp communication
   //Activate when it is necessary communication
   myClient = new Client(this, "192.168.1.57", 55555); // IP PORT

  // Open the port. baud rate=921600
  myPort = new Serial(this, COM_PORT, 921600);
  //For mac users
  //myPort = new Serial(this, "/dev/tty.usbmodem1412", 921600);
  myPort.clear();
  myPort.bufferUntil(255);
  
  
  
  cp5 = new ControlP5(this);
  
  but1= cp5.addButton("Activate")
        .setPosition(800,720)
        .setSize(160,19)
        .setValue(0)
        .setSwitch(true)
         ;
  
  
  Group g1 = cp5.addGroup("Experiments")
                .setPosition(800,200)
                .setBackgroundHeight(80)
                .setBackgroundColor(color(0,150))
                .setFont(f)
                .setBarHeight(23)
                .setSize(160,180)
                ;
                     
  r1=cp5.addRadioButton("radio")
     .setPosition(10,10)
     .setSize(20,10)
     .addItem("Static",0)
     .addItem("Basic Dinamics",1)
     .addItem("Vertical shift",2)
     .addItem("Horizontal shift",3)
     .addItem("Radial shift",4)
     .addItem("Experiment 1",5)
     .addItem("Experiment 2",6)
     .addItem("Real lecture",7)
     .addItem("Hexagonal",8)
     .addItem("Triangle",9)
     .addItem("Square",10)
     .addItem("Cylinder",11)
     .setGroup(g1)
     .activate("Vertical shift")
     ;
     

     
 /*     // add a vertical slider
     cp5.addSlider("Volume")
     .setFont(f4)
     .setPosition(800,500)
     .setSize(20,200)
     .setRange(0,200)
     .setValue(10)
     ;
  
  // reposition the Label for controller 'slider'
  cp5.getController("Volume").getCaptionLabel().align(ControlP5.CENTER, ControlP5.TOP_OUTSIDE).setPaddingX(0);
  
    // add a vertical slider
     cp5.addSlider("Speed")
     .setFont(f4)
     .setPosition(880,500)
     .setSize(20,200)
     .setRange(1,60)
     .setValue(1)
     ;
 // reposition the Label for controller 'slider'
  cp5.getController("Speed").getCaptionLabel().align(ControlP5.CENTER, ControlP5.TOP_OUTSIDE).setPaddingX(0);
  
  */
  

  
  frameRate(60);  // how many time takes each iteration??
  println("Now volume is set to 0. Press UP and DOWN keys to adjust volume (max 200)");
}

//assume 60fps reflesh rate
void draw() { 
  int i, pin;
  value_radialbutton=int(r1.getValue());
  //clear screen
  background(220);
  
      
  switch(value_radialbutton){
    case(0): ;break;
    case(1): ;break;
    case(2): ;break;
    case(3): ;break;
    case(4): ;break;
    case(5): ;break;
    case(6): ;break;
    case(7): ;break;
    case(8): matrix_generator_8();break;
    case(9): matrix_generator_9();break;
    case(10): matrix_generator_10();break;
    case(11): matrix_generator_11();break;
    
  }
  
  stimulation[20]=0;
  stimulation[41]=0;
  stimulation[62]=0;
  
  if(but1.isOn()) {
     
     if (aux==false)
     {
     a=millis();
     aux=true;
     }
     SendStimulationSignala(); }
  else {
       if (aux==true)
       {
         b=millis();
         c=b-a;
         println(c);
         aux=false;
       }
       SendStimulationSignalb(); }

  
  
// drawing te fingers
  rect(45,30,850,65,7);
  if (experiment2== true) {fill(color(0,0,255));}
  else if (experiment2r== true) {fill(color(255,0,0));}
  else {fill(color(0,0,0));}
  rect(45,800,850,65,7);
  
  
   
  
  fill(color(255,224,191));
  stroke(255);
  strokeWeight(8);
  rect(81,155,220,492,100,100,7,7);
  rect(312,155,220,492,100,100,7,7);
  rect(544,155,220,492,100,100,7,7);
  stroke(0);
  strokeWeight(1);
  
  textFont(f3);
  fill(color(255,204,0));
  textAlign(CENTER);
  text("StimulAR ELECTRO-STIMULATION DEVICE",70+WINDOW_SIZE_X/2,80); 
  textFont(f2);       
  fill(color(200,100,100));
  textAlign(CENTER);
  text("THUMB",WINDOW_SIZE_X/4,145); 
  text("INDEX",30+WINDOW_SIZE_X/2,145); 
  text("MIDDLE",60+WINDOW_SIZE_X*3/4,145);
  fill(color(0,0,0));
  text("Volume:"+str(Volume),WINDOW_SIZE_X-600,WINDOW_SIZE_Y-60);
  fill(color(0,0,0));
  text("Factor: "+Value_Factors[factor_counter],WINDOW_SIZE_X-360,WINDOW_SIZE_Y-60);
  fill(color(0,0,0));
  text("Speed:"+str(61-speed),WINDOW_SIZE_X-150,WINDOW_SIZE_Y-60);
  fill(color(0,0,0));
  text("Original:"+str(experiment2),WINDOW_SIZE_X-150,WINDOW_SIZE_Y-20);
  
  
  //draw electrodes. Red: Stimulation, Green: Impedance (touch)
  for (pin=0; pin<ELECTRODE_NUM; pin++) {
    //statuscolor=color(stimulation[pin]*16, abs(impedance_diff[pin])*8, 100);
    statuscolor=color((stimulation[pin]*Volume)/200, 0, 100);
    fill(statuscolor);
    ellipse((Electrode_Pos_X[pin]*0.4+0.5)*WINDOW_SIZE_X,(-Electrode_Pos_Y[pin]*0.4+0.5)*WINDOW_SIZE_Y,ELECTRODE_SIZE,ELECTRODE_SIZE); 
    textFont(f);
    fill(255,255,255);
    text(pin, (Electrode_Pos_X[pin]*0.4+0.5)*WINDOW_SIZE_X,(-Electrode_Pos_Y[pin]*0.4+0.5)*WINDOW_SIZE_Y+5);
  }


}










void radio(int a)
{

  switch(a)
  {
    case(8):  experiment2=false; experiment2r=false;break;
    case(9):  experiment2=false; experiment2r=false;break;
    case(10):  experiment2=false; experiment2r=false;break;
    case(11):  experiment2=false; experiment2r=false;break;
  }
}




void keyPressed() {

  
if (key == CODED) {
    if (keyCode == UP) {
      Volume = Volume + 1;
      
      
    } else if (keyCode == DOWN) {
      Volume = Volume -1;
      

    } 
   }
    else if (key == 'q') {
      
      factor_counter=factor_counter+1;
     
    } 
    
    else if (key == 'w') {
      
      factor_counter=factor_counter-1;
      
    
    } 
    
    else if (key == 's') {
      speed = speed +1;
      count2=0;
    } 
    
    else if (key == 'a') {
      speed = speed -1;
      count2=0;
    } 
  
  if(Volume > 200) Volume = 200;
  if(Volume <0) Volume = 0;
  
  
  
  if(factor_counter > 10) factor_counter = 10;
  if(factor_counter <0) factor_counter = 0;
  
  if(speed > 60) speed = 60;
  if(speed <1) speed = 1;
 
  
  //println("Volume is set to: ",speed);
  if(key == 'p'){
    myPort.write((byte)PC_ESP32_POLARITY_CHANGE); 
    println("Polarity Changed!");
  }   
}

//Serial event called when data is available
void serialEvent(Serial p) {
  int  a, inByte;
  
  p.read(); //0xFF
  for(a=0;a<2*ELECTRODE_NUM;a++){
     stim_feedback_random[a]=p.read();
     //println(stim_feedback_random[a]);
  }
  p.read();//0xFD
  
} 
